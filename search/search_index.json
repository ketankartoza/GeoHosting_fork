{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#geohosting-controller","title":"GeoHosting Controller","text":""},{"location":"#overview","title":"Overview","text":"<p>GeoHosting Controller is an installed app that will be used for controlling request to jenkins server.</p>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#disclaimer","title":"Disclaimer","text":"The software provided by this project is provided 'as is'. All information provided  within the platform should be independently verified before using as the basis for action. The contributors and developers of this platform take no responsibility for any loss of revenue, life, physical harm or any other adverse outcome that may  occur as a result of the use of this platform."},{"location":"#releases","title":"Releases|","text":""},{"location":"#project-chatroom","title":"Project Chatroom","text":"<p>We do not yet have a Chatroom set up for this project. Please use the GitHub issue tracker for discussions rather.</p>"},{"location":"#contributor-license-agreement-cla","title":"Contributor License Agreement (CLA)","text":"<p>Contributions to this project will be subject to our Contributor License Agreement (Coming soon)</p>"},{"location":"#license","title":"License","text":"<p>This project is open source, published under the AGPL-3. You can read our license to find out what rights this license bestows to users and contributors.</p>"},{"location":"help_guide/","title":"Help Guide","text":""},{"location":"help_guide/#help-guide","title":"Help Guide","text":"<p>Welcome to the GeoHosting! This guide will help you: - Navigate the interface - Make purchases - View purchased instances - Cancel agreements (subscriptions)</p>"},{"location":"help_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Navigating the Platform</li> <li>Making a Purchase</li> <li>Viewing Purchased Instances</li> <li>Cancelling Agreements</li> <li>Troubleshooting &amp; Support</li> </ol>"},{"location":"help_guide/#introduction","title":"Introduction","text":"<p>The GeoHosting platform allows you to purchase and manage geo-spatial hosting services (e.g., servers running GIS software or other geospatial applications). This guide provides step-by-step instructions for using the primary features, ensuring you get started quickly and effectively.</p>"},{"location":"help_guide/#navigating-the-platform","title":"Navigating the Platform","text":""},{"location":"help_guide/#1-login-registration","title":"1. Login / Registration","text":"<ol> <li>Go to GHS-Staging or your designated GeoHosting URL.</li> <li>Click Sign In if you have an existing account or Register for a new one.</li> <li>After successful login, you will be taken to your Dashboard.</li> </ol>"},{"location":"help_guide/#2-dashboard-overview","title":"2. Dashboard Overview","text":"<ul> <li>The dashboard typically provides quick stats on your hosted instances and subscription agreements.</li> <li>A navigation menu (top or side) helps you move between core sections:</li> <li>Home: Return to your main dashboard.</li> <li>Instances: View your active (and possibly inactive) servers/services.</li> <li>Marketplace: Browse and purchase hosting packages.</li> <li>Agreements: See a list of your ongoing (and past) subscriptions.</li> <li>Account Settings: Update profile info, security settings, and payment details.</li> </ul> <p>Note: The exact layout and labels can differ depending on version or custom branding.</p>"},{"location":"help_guide/#making-a-purchase","title":"Making a Purchase","text":"<p>When you need a new geo-spatial hosting service, you can get it from the Marketplace:</p> <ol> <li>Open the Marketplace</li> <li>Select Marketplace from the top or side menu.</li> <li> <p>You\u2019ll see a list of hosting packages with various tiers and pricing.</p> </li> <li> <p>Review Available Packages</p> </li> <li>Each package includes details such as CPU, RAM, storage, pricing, and any specialized GIS software.</li> <li> <p>Choose the package that meets your requirements.</p> </li> <li> <p>Purchase the Package</p> </li> <li>Click Buy, Subscribe, or Add to Cart (the label may vary).</li> <li>If multiple tiers exist (e.g., Basic, Pro), pick your preferred one.</li> <li> <p>Confirm the quantity and any optional add-ons.</p> </li> <li> <p>Checkout &amp; Payment</p> </li> <li>Proceed to Cart or Checkout to finalize payment.</li> <li>Provide or confirm your payment information (e.g., credit card).</li> <li> <p>Review your order and click Confirm or Place Order.</p> </li> <li> <p>Provisioning</p> </li> <li>After confirming payment, the platform will provision your instance.</li> <li>A success message or email confirmation will typically notify you once it\u2019s active.</li> </ol>"},{"location":"help_guide/#viewing-purchased-instances","title":"Viewing Purchased Instances","text":"<p>All your purchased services can be managed under Instances:</p> <ol> <li>Access the Instances Page</li> <li>From the main menu, click Instances.</li> <li> <p>A list of your active (and possibly suspended/expired) instances is displayed.</p> </li> <li> <p>Instance Details</p> </li> <li> <p>Click on any instance to see resource usage, IP addresses, billing info, and status (Running, Stopped, etc.).</p> </li> <li> <p>Instance Actions</p> </li> <li>Start / Stop / Restart: If the instance supports manual control, use these buttons to manage uptime.</li> <li> <p>Settings / Configuration: Manage SSH keys or passwords, depending on the platform\u2019s features.</p> </li> <li> <p>Billing / Agreement Reference</p> </li> <li>Each instance is tied to an agreement or subscription. Make note of the relevant ID for support or cancellations.</li> </ol>"},{"location":"help_guide/#cancelling-agreements","title":"Cancelling Agreements","text":"<p>If you need to discontinue a service or stop a subscription, follow these steps:</p> <ol> <li>Go to Agreements</li> <li>Click Agreements in the main menu.</li> <li> <p>You\u2019ll see all active and historical agreements.</p> </li> <li> <p>Choose the Agreement</p> </li> <li>Locate the agreement for the instance you want to cancel.</li> <li> <p>Click View or Details to open it.</p> </li> <li> <p>Confirm Cancellation</p> </li> <li>Select Cancel Agreement, Terminate, or End Subscription (varies by interface).</li> <li> <p>A pop-up may prompt you to confirm cancellation and warn you about data loss.</p> </li> <li> <p>Next Steps</p> </li> <li>Once cancelled, the instance is typically shut down and removed from your dashboard after a grace period (depending on terms).</li> <li>Ensure you back up important data before cancelling.</li> </ol> <p>Note: Cancellation typically halts further billing. Always check if your data is retained or deleted immediately.</p>"},{"location":"help_guide/#troubleshooting-support","title":"Troubleshooting &amp; Support","text":"<p>1. Instances Not Showing    - Ensure you\u2019re logged into the correct account.    - Check any filters on the Instances page (e.g., date range or status).</p> <p>2. Payment Issues    - Verify your payment details (credit card, billing address) are up to date.    - If errors persist, contact your payment provider or open a support ticket.</p> <p>3. Performance/Connectivity Problems    - Try stopping and restarting the instance from the Instances page.    - Consider upgrading your plan if resource usage is consistently high.</p> <p>4. Cannot Cancel    - Some agreements require special approval or might need manual assistance from support.    - If the Cancel button is disabled, contact the support team.</p> <p>5. General Support    - Visit the Help or FAQ page within the GeoHosting platform.    - Open a support ticket if you can\u2019t resolve your issue.    - Check the community forums (if available) for peer advice.</p>"},{"location":"help_guide/#feedback-contributions","title":"Feedback &amp; Contributions","text":"<p>We hope this guide helps you make the most of the GeoHosting platform! - Need more help? Reach out via the official support channels listed in the platform.</p>"},{"location":"quick_installation/","title":"Quick installation","text":""},{"location":"quick_installation/#quick-installation","title":"Quick installation","text":""},{"location":"subscription/","title":"Subscription","text":""},{"location":"dashboard/","title":"Documentation","text":""},{"location":"dashboard/#access-dashboard","title":"Access Dashboard","text":"<ol> <li>Dashboard: Users can access the dashboard by clicking on this link from the top navigation bar, this will redirects the users to the dashboard page.</li> </ol> <ul> <li> <p>Hosted Services: Users can use this as a walkthrough for the hosted services page.</p> </li> <li> <p>Agreements: Users can use this as a walkthrough for the agreements page.</p> </li> <li> <p>Orders: Users can use this as a walkthrough for the order page.</p> </li> <li> <p>Support: Users can use this as a walkthrough for the support page.</p> </li> <li> <p>Profile: Users can use this as a walkthrough for the profile page.</p> </li> <li> <p>Logout: Users can use this to logout from the platform.</p> </li> </ul>"},{"location":"dashboard/agreements/","title":"Documentation","text":""},{"location":"dashboard/agreements/#agreement","title":"Agreement","text":"<ol> <li>Agreements: Users can click on this <code>agreements</code> from the left navigation bar to access the agreements section.</li> </ol>"},{"location":"dashboard/hosted_services/","title":"Documentation","text":""},{"location":"dashboard/hosted_services/#hosted-services","title":"Hosted Services","text":"<ol> <li>Hosted Services: Users can access this section by clicking on the <code>Hosted Services</code> tab in the left navigation bar.</li> </ol>"},{"location":"dashboard/orders/","title":"Documentation","text":""},{"location":"dashboard/orders/#orders","title":"Orders","text":"<ol> <li>Orders: Users can click on this <code>Orders</code> tab from the left navigation bar to view all their orders.</li> </ol>"},{"location":"dashboard/profile/","title":"Documentation","text":""},{"location":"dashboard/profile/#profile","title":"Profile","text":"<ol> <li> <p>Profile: Users can access the profile page by clicking on the <code>Profile</code> tab from the left navigation bar.</p> </li> <li> <p>Edit Profile: Users can use this page as a walkthrough on how to edit their profile.</p> </li> <li> <p>View Profile: Users can view their profile information.</p> </li> </ol>"},{"location":"dashboard/profile/edit/","title":"Documentation","text":""},{"location":"dashboard/profile/edit/#edit-profile","title":"Edit Profile","text":""},{"location":"dashboard/profile/edit/#update-avatar","title":"Update Avatar","text":"<ol> <li>Update Avatar: Users can click this button to update their avatar. This will open the file explorer, allowing them to select a profile image.</li> </ol> <ol> <li> <p>Cancel: Users can click this button to close the file explorer.</p> </li> <li> <p>Select: After selecting the image users can click on this button to upload the image.</p> </li> </ol>"},{"location":"dashboard/profile/edit/#update-personnel-information","title":"Update Personnel Information","text":"<ol> <li> <p>Update Profile: To update their profile information, users can click this button after entering the latest details in the input fields. For example, to update the name, enter the new name in the name input field and then click the <code>Update Profile</code> button.</p> </li> <li> <p>After clicking the <code>Update Profile</code> button, users will receive a notification toast with the message <code>Your profile has been successfully updated</code>. This toast will automatically disappear after some time. To close it manually, click on the <code>x</code> icon at the top right corner of the toast.</p> </li> </ol> <p></p>"},{"location":"dashboard/profile/edit/#update-password","title":"Update Password","text":"<ol> <li> <p>Update Password: Users can click on this button to update the password, this button will open a password update form.</p> <p></p> <ul> <li> <p>Old Password: Enter the current password in this field.</p> </li> <li> <p>New Password: Enter the new password in this field.</p> </li> <li> <p>Repeat New Password: Enter the new password again in this field to confirm it.</p> </li> <li> <p>Change Password: After entering the new password and confirming it, click this button to update the password.</p> </li> <li> <p>Password do not match:</p> </li> </ul> <p></p> <pre><code>1. **Passwords do not match:** If the new password and the repeated new password do not match, users will receive an error message indicating the mismatch.\n</code></pre> <ul> <li>Old password is not correct:</li> </ul> <p></p> <pre><code>1. **Old password is not correct:** If the old password entered is incorrect, users will receive an error message indicating the incorrect old password.\n</code></pre> <ul> <li>Success:</li> </ul> <p>Users will receive this notification if their password is reset successfully. They will be logged out from the site and redirected to the home page.</p> <p></p> </li> </ol>"},{"location":"dashboard/profile/edit/#create-company","title":"Create Company","text":"<ol> <li>Create Company: This button allows users to create company.</li> </ol> <ul> <li> <p>Company Name: Enter the name of the company in this field.</p> </li> <li> <p>Billing Name: Enter the billing name of the company in this field.</p> </li> <li> <p>Billing Address: Enter the billing address of the company in this field.</p> </li> <li> <p>Postal Code: Enter the postal code of the location in this field.</p> </li> <li> <p>Country: Select the country of the company from the dropdown list.</p> </li> <li> <p>City: Enter the city of the company in this field.</p> </li> <li> <p>Region: Enter the region of the company in this field.</p> </li> <li> <p>VAT/Tax number: Enter the VAT/Tax number of the company in this field.</p> </li> <li> <p>Create: After filling in all the details click on this button to submit the request.</p> <ul> <li>Error: Users will receive this error they submit the request without filling in the form.</li> </ul> <p></p> <ul> <li>Success: Users will receive this notification if their company is created successfully.</li> </ul> <p></p> </li> </ul>"},{"location":"dashboard/profile/edit/#edit-existing-company-details","title":"Edit Existing Company Details","text":"<ol> <li>Company Name: By clicking on the company name, users can edit the information of the respective company. After clicking on the company name, a form will appear containing the company's details.</li> </ol> <ol> <li>Update: Fill the latest information in the form and click on this button to update the company details.</li> </ol>"},{"location":"dashboard/profile/view/","title":"View Profile","text":""},{"location":"dashboard/supports/","title":"Documentation","text":""},{"location":"dashboard/supports/#support","title":"Support","text":"<ul> <li> <p>List: Users can use this as a walkthrough on how to access the support page data list.</p> </li> <li> <p>Create: Users can use this as a walkthrough on how to create issue.</p> </li> </ul>"},{"location":"dashboard/supports/create/","title":"Documentation","text":""},{"location":"dashboard/supports/create/#create","title":"Create","text":"<ol> <li>Create Issue: Create a new issue by clicking on the <code>Create issue</code> button. After clicking on this button a form will appear.</li> </ol> <ol> <li> <p>Email: Users are required to enter their email address here, otherwise, their registered email will be used by default.</p> </li> <li> <p>Subject: Users are required to enter a subject for their issue.</p> </li> <li> <p>Issue Type: Users are required to select the type of issue they are reporting from the dropdown menu.</p> </li> </ol> <p></p> <ol> <li> <p>Issue Details: Users are required to enter a detailed description of their issue.</p> </li> <li> <p>Add Attachment: Users can add attachments to their issue by clicking on the <code>Add attachment</code> button.</p> </li> </ol> <p></p> <p>1 Cancel: Users can click on this button to cancel the attachment selection.</p> <p>2 Select: After selecting the desired file users are required to click on this button to upload the attachment.'</p> <ol> <li>Submit: After filling in all the required fields, users can submit their issue by clicking on this button.</li> </ol> <p>## Error</p> <p>If users forget to fill in any <code>*</code> required field and click the submit button, they will receive the error message <code>This field may not be blank</code> below the input field, and a notification toast will appear with the message <code>Failed to create a ticket</code>.</p> <p></p> <p>## Success</p> <p>Users will be notified by a notification toast after the successful submission of the form.</p> <p></p> <ol> <li>Cancel: Users can click on this button to cancel the issue creation process.</li> </ol>"},{"location":"dashboard/supports/list/","title":"List","text":""},{"location":"developer/","title":"Index","text":""},{"location":"developer/bims/","title":"BIMS","text":""},{"location":"developer/g3w/","title":"G3W","text":""},{"location":"developer/geo-hosting/","title":"Geo-Hosting","text":""},{"location":"developer/geonode/","title":"Geonode","text":""},{"location":"developer/geoserver/","title":"GeoServer","text":""},{"location":"developer/geosight/","title":"GeoSight","text":""},{"location":"developer/manual/","title":"Index","text":"<p>title: Automatically Generated Python Documentation summary: DO NOT EDIT THIS FILE MANUALLY : It is created during the mkdocs build process date: 2023-08-03</p>"},{"location":"developer/manual/#python-reference-manual","title":"Python Reference Manual","text":""},{"location":"developer/manual/#manage","title":"manage","text":"<p>Django's command-line utility for administrative tasks.</p>"},{"location":"developer/manual/#manage.main","title":"manage.main","text":"<pre><code>main()\n</code></pre> <p>Run administrative tasks.</p> Source code in <code>django_project/manage.py</code> <pre><code>def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n</code></pre>"},{"location":"developer/manual/#initialize","title":"initialize","text":"<p>GeoHosting Controller.</p>"},{"location":"developer/manual/#geohosting_controller.tasks","title":"geohosting_controller.tasks","text":"<p>GeoHosting.</p> <p>.. note:: Tasks.</p>"},{"location":"developer/manual/#geohosting_controller.apps","title":"geohosting_controller.apps","text":"<p>GeoHosting Controller.</p> <p>.. note:: Config App.</p>"},{"location":"developer/manual/#geohosting_controller.apps.Config","title":"geohosting_controller.apps.Config","text":"<p>               Bases: <code>AppConfig</code></p> <p>Config App.</p>"},{"location":"developer/manual/#geohosting_controller.variables","title":"geohosting_controller.variables","text":"<p>GeoHosting Controller.</p> <p>.. note:: Variables</p>"},{"location":"developer/manual/#geohosting_controller.variables.ActivityTypeTerm","title":"geohosting_controller.variables.ActivityTypeTerm","text":"<p>               Bases: <code>Enum</code></p> <p>Activity type.</p>"},{"location":"developer/manual/#geohosting_controller.connection","title":"geohosting_controller.connection","text":"<p>GeoHosting Controller.</p> <p>.. note:: Connection to API</p>"},{"location":"developer/manual/#geohosting_controller.connection.get_jenkins_crumb","title":"geohosting_controller.connection.get_jenkins_crumb","text":"<pre><code>get_jenkins_crumb(url)\n</code></pre> <p>Return crumb.</p> Source code in <code>geohosting_controller/connection.py</code> <pre><code>def get_jenkins_crumb(url):\n    \"\"\"Return crumb.\"\"\"\n    parsed_uri = urlparse(url)\n    host = '{uri.scheme}://{uri.netloc}/'.format(uri=parsed_uri)\n    response = requests.get(\n        f'{host}jenkins/crumbIssuer/api/json',\n        headers={\n            'apikey': return_api_key()\n        },\n        verify=False\n    )\n    return response.json()['crumb']\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.connection.request_get","title":"geohosting_controller.connection.request_get","text":"<pre><code>request_get(url: str, params: dict = None)\n</code></pre> <p>Handle get connection.</p> Source code in <code>geohosting_controller/connection.py</code> <pre><code>def request_get(url: str, params: dict = None):\n    \"\"\"Handle get connection.\"\"\"\n    return requests.get(\n        url, params=params if params else {},\n        headers={\n            'apikey': return_api_key()\n        },\n        verify=False\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.connection.request_post","title":"geohosting_controller.connection.request_post","text":"<pre><code>request_post(url: str, data: dict)\n</code></pre> <p>Handle post connection.</p> Source code in <code>geohosting_controller/connection.py</code> <pre><code>def request_post(url: str, data: dict):\n    \"\"\"Handle post connection.\"\"\"\n    return requests.post(\n        url,\n        params=data,\n        headers={\n            'apikey': return_api_key()\n        },\n        verify=False\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.connection.return_api_key","title":"geohosting_controller.connection.return_api_key","text":"<pre><code>return_api_key()\n</code></pre> <p>Return proxy api key.</p> Source code in <code>geohosting_controller/connection.py</code> <pre><code>def return_api_key():\n    \"\"\"Return proxy api key.\"\"\"\n    api_key = os.environ.get('PROXY_API_KEY', None)\n    if not api_key:\n        raise NoProxyApiKeyException()\n    return api_key\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.exceptions","title":"geohosting_controller.exceptions","text":"<p>GeoHosting Controller.</p> <p>.. note:: Contains all client exceptions.</p>"},{"location":"developer/manual/#geohosting_controller.exceptions.ActivityException","title":"geohosting_controller.exceptions.ActivityException","text":"<pre><code>ActivityException(message)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Activity exception.</p> Source code in <code>geohosting_controller/exceptions.py</code> <pre><code>def __init__(self, message):  # noqa\n    super().__init__(message)\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.exceptions.ConnectionErrorException","title":"geohosting_controller.exceptions.ConnectionErrorException","text":"<pre><code>ConnectionErrorException(message, response)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Connection error.</p> Source code in <code>geohosting_controller/exceptions.py</code> <pre><code>def __init__(self, message, response):  # noqa\n    super().__init__(message)\n    self.response = response\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.exceptions.NoClusterException","title":"geohosting_controller.exceptions.NoClusterException","text":"<pre><code>NoClusterException()\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>No Cluster exception.</p> Source code in <code>geohosting_controller/exceptions.py</code> <pre><code>def __init__(self):  # noqa\n    super().__init__('No cluster found.')\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.exceptions.NoProxyApiKeyException","title":"geohosting_controller.exceptions.NoProxyApiKeyException","text":"<pre><code>NoProxyApiKeyException()\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>No Api Key to proxy exception.</p> Source code in <code>geohosting_controller/exceptions.py</code> <pre><code>def __init__(self):  # noqa\n    super().__init__('PROXY_API_KEY is required.')\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper","title":"geohosting_controller.default_data.helper","text":""},{"location":"developer/manual/#geohosting_controller.default_data.helper.generate_cluster","title":"geohosting_controller.default_data.helper.generate_cluster","text":"<pre><code>generate_cluster()\n</code></pre> <p>Generate clusters data.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def generate_cluster():\n    \"\"\"Generate clusters data.\"\"\"\n    clusters = get_clusters()\n    for cluster in clusters:\n        try:\n            Cluster.objects.update_or_create(\n                code=cluster['code'],\n                region=Region.objects.get(code=cluster['region']),\n                defaults={\n                    'domain': cluster['domain'],\n                }\n            )\n        except Region.DoesNotExist:\n            pass\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper.generate_regions","title":"geohosting_controller.default_data.helper.generate_regions","text":"<pre><code>generate_regions()\n</code></pre> <p>Generate regions data.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def generate_regions():\n    \"\"\"Generate regions data.\"\"\"\n    regions = get_regions()\n    for region in regions:\n        Region.objects.update_or_create(\n            code=region['code'],\n            defaults={\n                'name': region['name'],\n            }\n        )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper.get_clusters","title":"geohosting_controller.default_data.helper.get_clusters","text":"<pre><code>get_clusters() -&gt; dict\n</code></pre> <p>Return clusters.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def get_clusters() -&gt; dict:\n    \"\"\"Return clusters.\"\"\"\n    return json.loads(\n        open(\n            absolute_path(\n                'geohosting_controller', 'default_data',\n                'cluster.json'\n            )\n        ).read()\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper.get_jenkin_activity_types","title":"geohosting_controller.default_data.helper.get_jenkin_activity_types","text":"<pre><code>get_jenkin_activity_types() -&gt; dict\n</code></pre> <p>Return jenkins activity types by product name.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def get_jenkin_activity_types() -&gt; dict:\n    \"\"\"Return jenkins activity types by product name.\"\"\"\n    return json.loads(\n        open(\n            absolute_path(\n                'geohosting_controller', 'default_data',\n                'jenkins_activity_type.json'\n            )\n        ).read()\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper.get_product_clusters","title":"geohosting_controller.default_data.helper.get_product_clusters","text":"<pre><code>get_product_clusters() -&gt; dict\n</code></pre> <p>Return product_clusters.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def get_product_clusters() -&gt; dict:\n    \"\"\"Return product_clusters.\"\"\"\n    return json.loads(\n        open(\n            absolute_path(\n                'geohosting_controller', 'default_data',\n                'product_cluster.json'\n            )\n        ).read()\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.default_data.helper.get_regions","title":"geohosting_controller.default_data.helper.get_regions","text":"<pre><code>get_regions() -&gt; dict\n</code></pre> <p>Return regions.</p> Source code in <code>geohosting_controller/default_data/helper.py</code> <pre><code>def get_regions() -&gt; dict:\n    \"\"\"Return regions.\"\"\"\n    return json.loads(\n        open(\n            absolute_path(\n                'geohosting_controller', 'default_data',\n                'region.json'\n            )\n        ).read()\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting_controller.management.commands.load_fixtures","title":"geohosting_controller.management.commands.load_fixtures","text":"<p>GeoHosting Controller.</p> <p>.. note:: Load fixtures</p>"},{"location":"developer/manual/#geohosting_controller.management.commands.load_fixtures.Command","title":"geohosting_controller.management.commands.load_fixtures.Command","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Command to load fixtures.</p>"},{"location":"developer/manual/#geohosting_controller.management.commands.load_fixtures.Command.handle","title":"handle","text":"<pre><code>handle(*args, **options)\n</code></pre> <p>Handle load fixtures.</p> Source code in <code>geohosting_controller/management/commands/load_fixtures.py</code> <pre><code>def handle(self, *args, **options):\n    \"\"\"Handle load fixtures.\"\"\"\n    for app in self.apps:\n        folder = os.path.join(\n            DJANGO_ROOT, app, 'fixtures'\n        )\n        for subdir, dirs, files in os.walk(folder):\n            files.sort()\n            for file in files:\n                if file.endswith('.json'):\n                    logger.info(f\"Loading {file}\")\n                    call_command('loaddata', file)\n</code></pre>"},{"location":"developer/manual/#geohosting.resend_email_backend","title":"geohosting.resend_email_backend","text":""},{"location":"developer/manual/#geohosting.resend_email_backend.ResendBackend","title":"geohosting.resend_email_backend.ResendBackend","text":"<p>               Bases: <code>BaseEmailBackend</code></p> <p>A Django email backend that uses the Resend API.</p>"},{"location":"developer/manual/#geohosting.resend_email_backend.ResendBackend.send_messages","title":"send_messages","text":"<pre><code>send_messages(email_messages)\n</code></pre> <p>Send a list of email messages using the Resend API.</p> <p>Parameters:</p> Name Type Description Default <code>email_messages</code> <p>List of Django email messages.</p> required <p>Returns:</p> Type Description <p>The number of successfully sent messages.</p> Source code in <code>geohosting/resend_email_backend.py</code> <pre><code>def send_messages(self, email_messages):\n    \"\"\"\n    Send a list of email messages using the Resend API.\n\n    :param email_messages: List of Django email messages.\n    :return: The number of successfully sent messages.\n    \"\"\"\n    count = 0\n\n    for email in email_messages:\n        response = self._send_via_resend(email)\n\n        if response.status_code == 200:\n            count += 1\n\n    return count\n</code></pre>"},{"location":"developer/manual/#geohosting.permissions","title":"geohosting.permissions","text":""},{"location":"developer/manual/#geohosting.permissions.IsAdminOrReadOnly","title":"geohosting.permissions.IsAdminOrReadOnly","text":"<p>               Bases: <code>BasePermission</code></p> <p>Custom permission to only allow admins to edit it.</p>"},{"location":"developer/manual/#geohosting.urls","title":"geohosting.urls","text":"<p>GeoHosting.</p>"},{"location":"developer/manual/#geohosting.apps","title":"geohosting.apps","text":"<p>GeoHosting.</p> <p>.. note:: Config App.</p>"},{"location":"developer/manual/#geohosting.apps.Config","title":"geohosting.apps.Config","text":"<p>               Bases: <code>AppConfig</code></p> <p>Config App.</p>"},{"location":"developer/manual/#geohosting.auth_backend","title":"geohosting.auth_backend","text":""},{"location":"developer/manual/#geohosting.validators","title":"geohosting.validators","text":""},{"location":"developer/manual/#geohosting.validators.app_name_validator","title":"geohosting.validators.app_name_validator","text":"<pre><code>app_name_validator(app_name)\n</code></pre> <p>App name validator.</p> Source code in <code>geohosting/validators.py</code> <pre><code>def app_name_validator(app_name):\n    \"\"\"App name validator.\"\"\"\n    from geohosting.models.activity import Activity\n    from geohosting.models.instance import Instance, InstanceStatus\n    if app_name:\n        if Instance.objects.filter(\n                name=app_name\n        ).exclude(status=InstanceStatus.DELETED).count():\n            raise ValidationError(app_name_exist_error_message)\n\n        if Activity.running_activities(app_name).count():\n            raise ValidationError(app_name_exist_error_message)\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.billing_information","title":"geohosting.serializer.billing_information","text":""},{"location":"developer/manual/#geohosting.serializer.billing_information.BillingInformationSerializer","title":"geohosting.serializer.billing_information.BillingInformationSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>User UserBillingInformation serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.billing_information.BillingInformationSerializer.get_country","title":"get_country","text":"<pre><code>get_country(obj: BillingInformation)\n</code></pre> <p>Return country of billing information.</p> Source code in <code>geohosting/serializer/billing_information.py</code> <pre><code>def get_country(self, obj: BillingInformation):\n    \"\"\"Return country of billing information.\"\"\"\n    return obj.country_name\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order","title":"geohosting.serializer.sales_order","text":""},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer","title":"geohosting.serializer.sales_order.SalesOrderDetailSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Sales order detail serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_company_name","title":"get_company_name","text":"<pre><code>get_company_name(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_company_name(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    try:\n        return obj.company.name\n    except Exception:\n        return ''\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_instance","title":"get_instance","text":"<pre><code>get_instance(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_instance(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    try:\n        return InstanceSerializer(\n            Instance.objects.filter(\n                name=obj.app_name\n            ).order_by('id').last()\n        ).data\n    except Instance.DoesNotExist:\n        return None\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_invoice_url","title":"get_invoice_url","text":"<pre><code>get_invoice_url(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_invoice_url(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    return obj.invoice_url\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_order_status","title":"get_order_status","text":"<pre><code>get_order_status(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_order_status(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    obj.update_payment_status()\n    return obj.order_status\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_package","title":"get_package","text":"<pre><code>get_package(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_package(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    return ProductPackageSerializer(obj.package).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderDetailSerializer.get_product","title":"get_product","text":"<pre><code>get_product(obj: SalesOrder)\n</code></pre> <p>Return product.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_product(self, obj: SalesOrder):\n    \"\"\"Return product.\"\"\"\n    return ProductDetailSerializer(obj.package.product).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderSerializer","title":"geohosting.serializer.sales_order.SalesOrderSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Sales order serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderSerializer.get_company_name","title":"get_company_name","text":"<pre><code>get_company_name(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_company_name(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    try:\n        return obj.company.name\n    except Exception:\n        return ''\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderSerializer.get_invoice_url","title":"get_invoice_url","text":"<pre><code>get_invoice_url(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_invoice_url(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    return obj.invoice_url\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderSerializer.get_order_status","title":"get_order_status","text":"<pre><code>get_order_status(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_order_status(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    obj.update_payment_status()\n    return obj.order_status\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.sales_order.SalesOrderSerializer.get_package","title":"get_package","text":"<pre><code>get_package(obj: SalesOrder)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/sales_order.py</code> <pre><code>def get_package(self, obj: SalesOrder):\n    \"\"\"Return package.\"\"\"\n    return ProductPackageSerializer(obj.package).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.product","title":"geohosting.serializer.product","text":""},{"location":"developer/manual/#geohosting.serializer.product.ProductDetailSerializer","title":"geohosting.serializer.product.ProductDetailSerializer","text":"<pre><code>ProductDetailSerializer(*args, **kwargs)\n</code></pre> <p>               Bases: <code>ModelSerializer</code></p> Source code in <code>geohosting/serializer/product.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.currency = kwargs.pop('currency', None)\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.product.ProductDetailSerializer.get_domain","title":"get_domain","text":"<pre><code>get_domain(obj: Product)\n</code></pre> <p>Return domain of product.</p> Source code in <code>geohosting/serializer/product.py</code> <pre><code>def get_domain(self, obj: Product):\n    \"\"\"Return domain of product.\"\"\"\n    try:\n        return obj.get_product_cluster(\n            Region.default_region()\n        ).cluster.domain\n    except ProductCluster.DoesNotExist:\n        return None\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.activity","title":"geohosting.serializer.activity","text":"<p>GeoHosting Controller.</p> <p>.. note:: Activity.</p>"},{"location":"developer/manual/#geohosting.serializer.activity.ActivitySerializer","title":"geohosting.serializer.activity.ActivitySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for Activity.</p>"},{"location":"developer/manual/#geohosting.serializer.activity.ActivitySerializer.get_activity_type","title":"get_activity_type","text":"<pre><code>get_activity_type(obj: Activity)\n</code></pre> <p>Return category.</p> Source code in <code>geohosting/serializer/activity.py</code> <pre><code>def get_activity_type(self, obj: Activity):\n    \"\"\"Return category.\"\"\"\n    return obj.activity_type.identifier\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.activity.ActivitySerializer.get_product","title":"get_product","text":"<pre><code>get_product(obj: Activity)\n</code></pre> <p>Return product.</p> Source code in <code>geohosting/serializer/activity.py</code> <pre><code>def get_product(self, obj: Activity):\n    \"\"\"Return product.\"\"\"\n    return obj.product.name\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.activity.ActivityTypeSerializer","title":"geohosting.serializer.activity.ActivityTypeSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for ActivityType.</p>"},{"location":"developer/manual/#geohosting.serializer.email_auth_token","title":"geohosting.serializer.email_auth_token","text":""},{"location":"developer/manual/#geohosting.serializer.instance","title":"geohosting.serializer.instance","text":""},{"location":"developer/manual/#geohosting.serializer.instance.InstanceSerializer","title":"geohosting.serializer.instance.InstanceSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Sales instance serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.instance.InstanceSerializer.get_package","title":"get_package","text":"<pre><code>get_package(obj: Instance)\n</code></pre> <p>Return package.</p> Source code in <code>geohosting/serializer/instance.py</code> <pre><code>def get_package(self, obj: Instance):\n    \"\"\"Return package.\"\"\"\n    return ProductPackageSerializer(obj.price).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.instance.InstanceSerializer.get_product","title":"get_product","text":"<pre><code>get_product(obj: Instance)\n</code></pre> <p>Return product.</p> Source code in <code>geohosting/serializer/instance.py</code> <pre><code>def get_product(self, obj: Instance):\n    \"\"\"Return product.\"\"\"\n    return ProductDetailSerializer(obj.price.product).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.instance.InstanceSerializer.get_url","title":"get_url","text":"<pre><code>get_url(obj: Instance)\n</code></pre> <p>Return url.</p> Source code in <code>geohosting/serializer/instance.py</code> <pre><code>def get_url(self, obj: Instance):\n    \"\"\"Return url.\"\"\"\n    return obj.url\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.register","title":"geohosting.serializer.register","text":""},{"location":"developer/manual/#geohosting.serializer.user","title":"geohosting.serializer.user","text":"<p>GeoHosting.</p> <p>.. note:: User serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.user.ChangePasswordSerializer","title":"geohosting.serializer.user.ChangePasswordSerializer","text":"<p>               Bases: <code>Serializer</code></p> <p>Change password serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.user.UserBillingInformationSerializer","title":"geohosting.serializer.user.UserBillingInformationSerializer","text":"<p>               Bases: <code>BillingInformationSerializer</code></p> <p>User UserBillingInformation serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.user.UserProfileSerializer","title":"geohosting.serializer.user.UserProfileSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>User Profile serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.user.UserSerializer","title":"geohosting.serializer.user.UserSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>User serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.user.UserSerializer.get_billing_information","title":"get_billing_information","text":"<pre><code>get_billing_information(user: User)\n</code></pre> <p>Return UserBillingInformation.</p> Source code in <code>geohosting/serializer/user.py</code> <pre><code>def get_billing_information(self, user: User):\n    \"\"\"Return UserBillingInformation.\"\"\"\n    try:\n        billing_information = user.userbillinginformation\n    except UserBillingInformation.DoesNotExist:\n        billing_information = UserBillingInformation.objects.create(\n            user=user\n        )\n    return UserBillingInformationSerializer(billing_information).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.user.UserSerializer.get_profile","title":"get_profile","text":"<pre><code>get_profile(user: User)\n</code></pre> <p>Return profile.</p> Source code in <code>geohosting/serializer/user.py</code> <pre><code>def get_profile(self, user: User):\n    \"\"\"Return profile.\"\"\"\n    return UserProfileSerializer(user.userprofile).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.agreement","title":"geohosting.serializer.agreement","text":"<p>GeoHosting Controller.</p> <p>.. note:: Agreement.</p>"},{"location":"developer/manual/#geohosting.serializer.agreement.AgreementDetailSerializer","title":"geohosting.serializer.agreement.AgreementDetailSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for AgreementDetail.</p>"},{"location":"developer/manual/#geohosting.serializer.agreement.AgreementDetailSerializer.get_name","title":"get_name","text":"<pre><code>get_name(agreement: AgreementDetail)\n</code></pre> <p>Return AgreementDetail.</p> Source code in <code>geohosting/serializer/agreement.py</code> <pre><code>def get_name(self, agreement: AgreementDetail):\n    \"\"\"Return AgreementDetail.\"\"\"\n    return agreement.agreement.name\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.agreement.SalesOrderAgreementSerializer","title":"geohosting.serializer.agreement.SalesOrderAgreementSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for SalesOrderAgreement.</p>"},{"location":"developer/manual/#geohosting.serializer.agreement.SalesOrderAgreementSerializer.get_download_url","title":"get_download_url","text":"<pre><code>get_download_url(agreement: AgreementDetail)\n</code></pre> <p>Return download url for the agreement.</p> Source code in <code>geohosting/serializer/agreement.py</code> <pre><code>def get_download_url(self, agreement: AgreementDetail):\n    \"\"\"Return download url for the agreement.\"\"\"\n    return reverse(\n        'agreements-download', kwargs={'pk': agreement.pk}\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.company","title":"geohosting.serializer.company","text":"<p>GeoHosting.</p> <p>.. note:: User serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.company.CompanyBillingInformationSerializer","title":"geohosting.serializer.company.CompanyBillingInformationSerializer","text":"<p>               Bases: <code>BillingInformationSerializer</code></p> <p>Company UserBillingInformation serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.company.CompanyDetailSerializer","title":"geohosting.serializer.company.CompanyDetailSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Company serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.company.CompanyDetailSerializer.get_billing_information","title":"get_billing_information","text":"<pre><code>get_billing_information(company: Company)\n</code></pre> <p>Return CompanyBillingInformation.</p> Source code in <code>geohosting/serializer/company.py</code> <pre><code>def get_billing_information(self, company: Company):\n    \"\"\"Return CompanyBillingInformation.\"\"\"\n    try:\n        billing_information = company.companybillinginformation\n    except CompanyBillingInformation.DoesNotExist:\n        billing_information = CompanyBillingInformation.objects.create(\n            user=company\n        )\n    return CompanyBillingInformationSerializer(billing_information).data\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.company.CompanySerializer","title":"geohosting.serializer.company.CompanySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Company serializer.</p>"},{"location":"developer/manual/#geohosting.serializer.support","title":"geohosting.serializer.support","text":""},{"location":"developer/manual/#geohosting.serializer.support.AttachmentSerializer","title":"geohosting.serializer.support.AttachmentSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"developer/manual/#geohosting.serializer.support.AttachmentSerializer.save","title":"save","text":"<pre><code>save(**kwargs)\n</code></pre> <p>On save.</p> Source code in <code>geohosting/serializer/support.py</code> <pre><code>def save(self, **kwargs):\n    \"\"\"On save.\"\"\"\n    instance = super().save(**kwargs)\n    instance.post_to_erpnext()\n    return instance\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.support.TicketSerializer","title":"geohosting.serializer.support.TicketSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"developer/manual/#geohosting.serializer.support.TicketSerializer.save","title":"save","text":"<pre><code>save(**kwargs)\n</code></pre> <p>On save.</p> Source code in <code>geohosting/serializer/support.py</code> <pre><code>def save(self, **kwargs):\n    \"\"\"On save.\"\"\"\n    instance = super().save(**kwargs)\n    instance.post_to_erpnext()\n    return instance\n</code></pre>"},{"location":"developer/manual/#geohosting.serializer.country","title":"geohosting.serializer.country","text":"<p>GeoHosting Controller.</p> <p>.. note:: Country.</p>"},{"location":"developer/manual/#geohosting.serializer.country.CountrySerializer","title":"geohosting.serializer.country.CountrySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for Country.</p>"},{"location":"developer/manual/#geohosting.factories.sales_order","title":"geohosting.factories.sales_order","text":"<p>Geohosting.</p> <p>.. note:: Factory classes for Product</p>"},{"location":"developer/manual/#geohosting.factories.sales_order.SalesOrderFactory","title":"geohosting.factories.sales_order.SalesOrderFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for SalesOrder model.</p>"},{"location":"developer/manual/#geohosting.factories.product","title":"geohosting.factories.product","text":"<p>Geohosting.</p> <p>.. note:: Factory classes for Product</p>"},{"location":"developer/manual/#geohosting.factories.product.ProductFactory","title":"geohosting.factories.product.ProductFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for Product model.</p>"},{"location":"developer/manual/#geohosting.factories.agreement","title":"geohosting.factories.agreement","text":"<p>Geohosting.</p> <p>.. note:: Factory classes for Agreement</p>"},{"location":"developer/manual/#geohosting.factories.agreement.AgreementDetailFactory","title":"geohosting.factories.agreement.AgreementDetailFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for AgreementDetail model.</p>"},{"location":"developer/manual/#geohosting.factories.agreement.AgreementFactory","title":"geohosting.factories.agreement.AgreementFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for Agreement model.</p>"},{"location":"developer/manual/#geohosting.factories.agreement.SalesOrderAgreementFactory","title":"geohosting.factories.agreement.SalesOrderAgreementFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for SalesOrderAgreement model.</p>"},{"location":"developer/manual/#geohosting.factories.erp_company","title":"geohosting.factories.erp_company","text":"<p>Geohosting.</p> <p>.. note:: Factory classes for ErpCompany</p>"},{"location":"developer/manual/#geohosting.factories.erp_company.ErpCompanyFactory","title":"geohosting.factories.erp_company.ErpCompanyFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for ErpCompany model.</p>"},{"location":"developer/manual/#geohosting.factories.package","title":"geohosting.factories.package","text":"<p>Geohosting.</p> <p>.. note:: Factory classes for Package</p>"},{"location":"developer/manual/#geohosting.factories.package.PackageFactory","title":"geohosting.factories.package.PackageFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for Package model.</p>"},{"location":"developer/manual/#geohosting.factories.package.PackageGroupFactory","title":"geohosting.factories.package.PackageGroupFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for PackageGroup model.</p>"},{"location":"developer/manual/#geohosting.tasks.instances","title":"geohosting.tasks.instances","text":""},{"location":"developer/manual/#geohosting.tasks.instances.check_instances","title":"geohosting.tasks.instances.check_instances","text":"<pre><code>check_instances()\n</code></pre> <p>Check instances.</p> Source code in <code>geohosting/tasks/instances.py</code> <pre><code>@app.task(name='check_instances')\ndef check_instances():\n    \"\"\"Check instances.\"\"\"\n    for instance in Instance.objects.exclude(\n            status=InstanceStatus.DELETED\n    ):\n        instance.checking_server()\n</code></pre>"},{"location":"developer/manual/#geohosting.tasks.products","title":"geohosting.tasks.products","text":""},{"location":"developer/manual/#geohosting.tasks.erp","title":"geohosting.tasks.erp","text":""},{"location":"developer/manual/#geohosting.tasks.erp.sync_erp_data","title":"geohosting.tasks.erp.sync_erp_data","text":"<pre><code>sync_erp_data(class_name)\n</code></pre> <p>Sync erp data from ERPNEXT API.</p> Source code in <code>geohosting/tasks/erp.py</code> <pre><code>@shared_task\ndef sync_erp_data(class_name):\n    \"\"\"Sync erp data from ERPNEXT API.\"\"\"\n    if class_name:\n        Model = apps.get_model('geohosting', class_name)\n        Model.sync_data()\n</code></pre>"},{"location":"developer/manual/#geohosting.views.auth","title":"geohosting.views.auth","text":""},{"location":"developer/manual/#geohosting.views.reset_password","title":"geohosting.views.reset_password","text":""},{"location":"developer/manual/#geohosting.views.products","title":"geohosting.views.products","text":""},{"location":"developer/manual/#geohosting.views.products.fetch_products_from_erpnext","title":"geohosting.views.products.fetch_products_from_erpnext","text":"<pre><code>fetch_products_from_erpnext()\n</code></pre> <p>Fetch products from ERPNEXT API.</p> Source code in <code>geohosting/views/products.py</code> <pre><code>def fetch_products_from_erpnext():\n    \"\"\"Fetch products from ERPNEXT API.\"\"\"\n    generate_regions()\n    generate_cluster()\n\n    doctype = 'Item'\n    print('Fetching all products from ERPNEXT API...')\n    product_list = fetch_erpnext_data(\n        doctype,\n        {\n            'item_group': 'GeoHosting'\n        }\n    )\n    products = []\n    packages = []\n\n    for product_detail in product_list:\n        name = product_detail.get('item_name', '')\n        print(f'Checking {name}')\n\n        # Currently we focus on DO\n        if name.endswith('DO'):\n            packages.append(product_detail)\n\n        description = product_detail.get('description', None)\n        if description:\n            desc = parse_description(description)\n            if not desc.get('short_description'):\n                continue\n\n            # -----------------------\n            # Extract attributes\n            _product_detail = fetch_erpnext_detail_data(\n                f'{doctype}/{name}'\n            )\n            attributes = _product_detail.get('attributes', [])\n            host_attributes = {}\n            for attribute in attributes:\n                if 'host specifications' in attribute.get('attribute').lower():\n                    attribute_detail = fetch_erpnext_detail_data(\n                        f'Item Attribute/{attribute[\"attribute\"]}'\n                    )\n                    if attribute_detail:\n                        for value in attribute_detail[\n                            'item_attribute_values'\n                        ]:\n                            host_attributes[value['abbr'].lower()] = value[\n                                'attribute_value'\n                            ]\n            product_detail['host_attributes'] = host_attributes\n            # -----------------------\n            products.append(product_detail)\n\n            # Extracting data from the product_detail dictionary\n            upstream_id = product_detail.get('name', '')\n            description = desc.get('short_description', '')\n            image_path = product_detail.get('image', '')\n            available = product_detail.get(\n                'available_in_geohosting', 0) == 1\n\n            defaults = {\n                'name': name,\n                'description': description,\n                'available': available\n            }\n            if image_path:\n                defaults['image'] = download_erp_file(image_path)\n            product_obj, created = Product.objects.update_or_create(\n                upstream_id=upstream_id,\n                defaults=defaults\n            )\n            save_product_image(\n                product_obj, desc, 'overview_header',\n                'overview_description',\n                f'/assets/geohosting/images/Product_Images/{name}/main.png'\n            )\n            save_product_image(\n                product_obj, desc, 'overview_continuation_header',\n                'overview_continuation',\n                f'/assets/geohosting/images/Product_Images/{name}/'\n                f'secondary.png'\n            )\n\n            # Save all description to product metadata\n            for key, value in desc.items():\n                metadata, _ = ProductMetadata.objects.update_or_create(\n                    product=product_obj,\n                    key=key,\n                    defaults={\n                        'value': value,\n                    }\n                )\n\n    # Get pricing\n    for package_detail in packages:\n        name = package_detail.get(\"name\", \"\")\n        print(f'Getting product detail: {name}')\n        package_detail = fetch_erpnext_detail_data(f'{doctype}/{name}')\n        product_name = package_detail.get('variant_of', '')\n        try:\n            product_detail = [\n                product\n                for product in products if product['name'] == product_name\n            ][0]\n        except IndexError:\n            continue\n\n        if package_detail:\n            spec = {}\n            for key, value in product_detail.get(\n                    'host_attributes', {}\n            ).items():\n                if key in name.lower():\n                    spec = {\n                        'spec': [spec.strip() for spec in value.split(';')]\n                    }\n            pricing_list = fetch_erpnext_detail_data(\n                'Item Price', {\n                    'item_code': name\n                }\n            )\n            product = Product.objects.get(\n                upstream_id=product_name\n            )\n            package_group, _ = PackageGroup.objects.update_or_create(\n                name=name\n            )\n            for item_price in pricing_list:\n                print(f'Price: {item_price.get(\"name\")}')\n                currency = item_price.get('currency', 'USD')\n                price = item_price.get('price_list_rate', 0)\n                try:\n                    Package.objects.update_or_create(\n                        product=product,\n                        erpnext_code=item_price.get('name'),\n                        defaults={\n                            'feature_list': spec,\n                            'price': price,\n                            'currency': currency,\n                            'name': item_price.get('item_name'),\n                            'erpnext_item_code': item_price.get('item_code'),\n                            'package_group': package_group,\n                            'price_list': item_price.get('price_list')\n                        }\n                    )\n                except Product.DoesNotExist:\n                    continue\n    return products\n</code></pre>"},{"location":"developer/manual/#geohosting.views.products.parse_description","title":"geohosting.views.products.parse_description","text":"<pre><code>parse_description(html_content: str) -&gt; dict\n</code></pre> <p>Parse description from html content of product page.</p> Source code in <code>geohosting/views/products.py</code> <pre><code>def parse_description(html_content: str) -&gt; dict:\n    \"\"\"Parse description from html content of product page.\"\"\"\n    html_content = html_content.replace(\n        \"\\uFEFF\", \"\"\n    ).replace('&lt;strong&gt;&lt;/strong&gt;', '')\n    pattern = re.compile(r'&lt;strong&gt;(.*?)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;(.*?)&lt;/p&gt;')\n    matches = pattern.findall(html_content)\n    data = {\n        match[0].strip().lower().replace(\" \", \"_\"):\n            match[1].strip() for match in matches\n    }\n    return data\n</code></pre>"},{"location":"developer/manual/#geohosting.views.products.save_product_image","title":"geohosting.views.products.save_product_image","text":"<pre><code>save_product_image(\n    obj,\n    product_desc: dict,\n    title_key,\n    description_key,\n    image_path: str,\n)\n</code></pre> <p>Save product image from description of dict.</p> Source code in <code>geohosting/views/products.py</code> <pre><code>def save_product_image(\n        obj, product_desc: dict, title_key, description_key, image_path: str\n):\n    \"\"\"Save product image from description of dict.\"\"\"\n    try:\n        title = product_desc[title_key]\n        description = product_desc[description_key]\n        image_file = download_erp_file(image_path)\n        if not image_file:\n            raise AttributeError()\n        print(f'Save {image_file}')\n        media, _ = ProductMedia.objects.update_or_create(\n            product=obj,\n            title=title,\n            defaults={\n                'image': image_file,\n                'description': description\n            }\n        )\n    except (KeyError, AttributeError):\n        pass\n</code></pre>"},{"location":"developer/manual/#geohosting.views.home","title":"geohosting.views.home","text":""},{"location":"developer/manual/#geohosting.admin.sales_order","title":"geohosting.admin.sales_order","text":""},{"location":"developer/manual/#geohosting.admin.sales_order.SalesOrderAdmin","title":"geohosting.admin.sales_order.SalesOrderAdmin","text":"<p>               Bases: <code>LogTrackerObjectAdmin</code></p>"},{"location":"developer/manual/#geohosting.admin.sales_order.SalesOrderAdmin.activities","title":"activities","text":"<pre><code>activities(obj: SalesOrder)\n</code></pre> <p>Return product.</p> Source code in <code>geohosting/admin/sales_order.py</code> <pre><code>def activities(self, obj: SalesOrder):\n    \"\"\"Return product.\"\"\"\n    return mark_safe(\n        f'&lt;a href=\"/admin/geohosting/activity/?'\n        f'sales_order__id__exact={obj.id}\" target=\"_blank\"'\n        f'&gt;activities&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.sales_order.update_payment_status","title":"geohosting.admin.sales_order.update_payment_status","text":"<pre><code>update_payment_status(modeladmin, request, queryset)\n</code></pre> <p>Update order status.</p> Source code in <code>geohosting/admin/sales_order.py</code> <pre><code>def update_payment_status(modeladmin, request, queryset):\n    \"\"\"Update order status.\"\"\"\n    for order in queryset.filter():\n        order.update_payment_status()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.product","title":"geohosting.admin.product","text":""},{"location":"developer/manual/#geohosting.admin.activity","title":"geohosting.admin.activity","text":""},{"location":"developer/manual/#geohosting.admin.activity.ActivityAdmin","title":"geohosting.admin.activity.ActivityAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Activity admin.</p>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityCreateInstanceForm","title":"geohosting.admin.activity.ActivityCreateInstanceForm","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Create instance from activity.</p>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityCreateInstanceForm.get_form","title":"get_form","text":"<pre><code>get_form(request, obj=None, **kwargs)\n</code></pre> <p>Get form of admin.</p> Source code in <code>geohosting/admin/activity.py</code> <pre><code>def get_form(self, request, obj=None, **kwargs):\n    \"\"\"Get form of admin.\"\"\"\n    if not obj:\n        self.form = self.add_form\n    form = super(\n        ActivityCreateInstanceForm, self\n    ).get_form(request, obj, **kwargs)\n    form.user = request.user\n    return form\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityCreateInstanceForm.has_change_permission","title":"has_change_permission","text":"<pre><code>has_change_permission(request, obj=None)\n</code></pre> <p>Return change permission.</p> Source code in <code>geohosting/admin/activity.py</code> <pre><code>def has_change_permission(self, request, obj=None):\n    \"\"\"Return change permission.\"\"\"\n    return False\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityCreateInstanceForm.has_delete_permission","title":"has_delete_permission","text":"<pre><code>has_delete_permission(request, obj=None)\n</code></pre> <p>Return delete permission.</p> Source code in <code>geohosting/admin/activity.py</code> <pre><code>def has_delete_permission(self, request, obj=None):\n    \"\"\"Return delete permission.\"\"\"\n    return False\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityCreateInstanceForm.has_view_permission","title":"has_view_permission","text":"<pre><code>has_view_permission(request, obj=None)\n</code></pre> <p>Return view permission.</p> Source code in <code>geohosting/admin/activity.py</code> <pre><code>def has_view_permission(self, request, obj=None):\n    \"\"\"Return view permission.\"\"\"\n    return False\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.activity.ActivityTypeAdmin","title":"geohosting.admin.activity.ActivityTypeAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>ActivityType admin.</p>"},{"location":"developer/manual/#geohosting.admin.region","title":"geohosting.admin.region","text":""},{"location":"developer/manual/#geohosting.admin.log","title":"geohosting.admin.log","text":""},{"location":"developer/manual/#geohosting.admin.log.LogTrackerAdmin","title":"geohosting.admin.log.LogTrackerAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>LogTracker admin.</p>"},{"location":"developer/manual/#geohosting.admin.log.LogTrackerAdmin.has_add_permission","title":"has_add_permission","text":"<pre><code>has_add_permission(*args, **kwargs)\n</code></pre> <p>Can't add log tracker.</p> Source code in <code>geohosting/admin/log.py</code> <pre><code>def has_add_permission(*args, **kwargs):\n    \"\"\"Can't add log tracker.\"\"\"\n    return False\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.log.LogTrackerObjectAdmin","title":"geohosting.admin.log.LogTrackerObjectAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Log tracker object admin.</p>"},{"location":"developer/manual/#geohosting.admin.log.LogTrackerObjectAdmin.logs","title":"logs","text":"<pre><code>logs(instance)\n</code></pre> <p>Return logs.</p> Source code in <code>geohosting/admin/log.py</code> <pre><code>def logs(self, instance):\n    \"\"\"Return logs.\"\"\"\n    content_type = ContentType.objects.get_for_model(instance)\n    return mark_safe(\n        '&lt;a href=\"/admin/geohosting/logtracker/?'\n        f'object_id__exact={instance.id}&amp;'\n        f'content_type__id__exact={content_type.id}\" '\n        'target=\"_blank\"&gt;logs&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.webhook","title":"geohosting.admin.webhook","text":""},{"location":"developer/manual/#geohosting.admin.webhook.WebhookEventAdmin","title":"geohosting.admin.webhook.WebhookEventAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>WebhookEvent admin.</p>"},{"location":"developer/manual/#geohosting.admin.webhook.WebhookEventAdmin.activity_link","title":"activity_link","text":"<pre><code>activity_link(obj: WebhookEvent)\n</code></pre> <p>Return activity l.</p> Source code in <code>geohosting/admin/webhook.py</code> <pre><code>def activity_link(self, obj: WebhookEvent):\n    \"\"\"Return activity l.\"\"\"\n    if not obj.activity:\n        return ''\n    return mark_safe(\n        '&lt;a href=\"/admin/geohosting/activity/'\n        f'?id__exact={obj.activity.id}\" '\n        'target=\"_blank\"&gt;link&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.webhook.WebhookEventAdmin.instance_link","title":"instance_link","text":"<pre><code>instance_link(obj: WebhookEvent)\n</code></pre> <p>Return instance link.</p> Source code in <code>geohosting/admin/webhook.py</code> <pre><code>def instance_link(self, obj: WebhookEvent):\n    \"\"\"Return instance link.\"\"\"\n    if not obj.activity or not obj.activity.instance:\n        return ''\n    return mark_safe(\n        '&lt;a href=\"/admin/geohosting/instance/'\n        f'?id__exact={obj.activity.instance.id}\" '\n        'target=\"_blank\"&gt;link&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.webhook.WebhookEventAdmin.sync_status","title":"sync_status","text":"<pre><code>sync_status(obj: WebhookEvent)\n</code></pre> <p>Return logs.</p> Source code in <code>geohosting/admin/webhook.py</code> <pre><code>def sync_status(self, obj: WebhookEvent):\n    \"\"\"Return logs.\"\"\"\n    try:\n        return obj.data['Status']\n    except KeyError:\n        return ''\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.webhook.clean_webhook_event","title":"geohosting.admin.webhook.clean_webhook_event","text":"<pre><code>clean_webhook_event(modeladmin, request, queryset)\n</code></pre> <p>Clean webhook event.</p> Source code in <code>geohosting/admin/webhook.py</code> <pre><code>def clean_webhook_event(modeladmin, request, queryset):\n    \"\"\"Clean webhook event.\"\"\"\n    WebhookEvent.objects.filter(activity__isnull=True).delete()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance","title":"geohosting.admin.instance","text":""},{"location":"developer/manual/#geohosting.admin.instance.InstanceAdmin","title":"geohosting.admin.instance.InstanceAdmin","text":"<p>               Bases: <code>LogTrackerObjectAdmin</code></p> <p>Instance admin.</p>"},{"location":"developer/manual/#geohosting.admin.instance.InstanceAdmin.cluster","title":"cluster","text":"<pre><code>cluster(obj: Instance)\n</code></pre> <p>Return cluster.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def cluster(self, obj: Instance):\n    \"\"\"Return cluster.\"\"\"\n    return obj.cluster.code\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.InstanceAdmin.link","title":"link","text":"<pre><code>link(instance)\n</code></pre> <p>Return logs.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def link(self, instance):\n    \"\"\"Return logs.\"\"\"\n    return mark_safe(\n        f'&lt;a href=\"{instance.url}\" target=\"_blank\"&gt;link&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.InstanceAdmin.product","title":"product","text":"<pre><code>product(obj: Instance)\n</code></pre> <p>Return product.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def product(self, obj: Instance):\n    \"\"\"Return product.\"\"\"\n    return obj.price.product.name\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.InstanceAdmin.webhooks","title":"webhooks","text":"<pre><code>webhooks(instance)\n</code></pre> <p>Return logs.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def webhooks(self, instance):\n    \"\"\"Return logs.\"\"\"\n    return mark_safe(\n        '&lt;a href=\"/admin/geohosting/webhookevent/?'\n        f'activity__instance__exact={instance.id}\"'\n        'target=\"_blank\"&gt;webhooks&lt;/a&gt;'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.cancel_subscription","title":"geohosting.admin.instance.cancel_subscription","text":"<pre><code>cancel_subscription(modeladmin, request, queryset)\n</code></pre> <p>Cancel subscription.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def cancel_subscription(modeladmin, request, queryset):\n    \"\"\"Cancel subscription.\"\"\"\n    for config in queryset:\n        config.cancel_subscription()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.check_instance","title":"geohosting.admin.instance.check_instance","text":"<pre><code>check_instance(modeladmin, request, queryset)\n</code></pre> <p>Send instance.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def check_instance(modeladmin, request, queryset):\n    \"\"\"Send instance.\"\"\"\n    for config in queryset:\n        config.checking_server()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.instance.send_credentials","title":"geohosting.admin.instance.send_credentials","text":"<pre><code>send_credentials(modeladmin, request, queryset)\n</code></pre> <p>Send credentials.</p> Source code in <code>geohosting/admin/instance.py</code> <pre><code>def send_credentials(modeladmin, request, queryset):\n    \"\"\"Send credentials.\"\"\"\n    for config in queryset:\n        config.send_credentials()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.erp","title":"geohosting.admin.erp","text":""},{"location":"developer/manual/#geohosting.admin.erp.ErpCompanyAdmin","title":"geohosting.admin.erp.ErpCompanyAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p>"},{"location":"developer/manual/#geohosting.admin.erp.ErpCompanyAdmin.changelist_view","title":"changelist_view","text":"<pre><code>changelist_view(request, extra_context=None)\n</code></pre> <p>Changelist view.</p> Source code in <code>geohosting/admin/erp.py</code> <pre><code>def changelist_view(self, request, extra_context=None):\n    \"\"\"Changelist view.\"\"\"\n    custom_context = {\n        \"class_name\": \"ErpCompany\"\n    }\n    extra_context = extra_context or {}\n    extra_context.update(custom_context)\n    return super().changelist_view(request, extra_context=extra_context)\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.cluster","title":"geohosting.admin.cluster","text":""},{"location":"developer/manual/#geohosting.admin.cluster.ClusterAdmin","title":"geohosting.admin.cluster.ClusterAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Cluster admin.</p>"},{"location":"developer/manual/#geohosting.admin.user","title":"geohosting.admin.user","text":""},{"location":"developer/manual/#geohosting.admin.agreement","title":"geohosting.admin.agreement","text":""},{"location":"developer/manual/#geohosting.admin.ticket","title":"geohosting.admin.ticket","text":"<p>GeoHosting Controller.</p> <p>.. note:: Admins</p>"},{"location":"developer/manual/#geohosting.admin.ticket.TicketAdmin","title":"geohosting.admin.ticket.TicketAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Ticket admin.</p>"},{"location":"developer/manual/#geohosting.admin.company","title":"geohosting.admin.company","text":""},{"location":"developer/manual/#geohosting.admin.company.CompanyAdmin","title":"geohosting.admin.company.CompanyAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Company admin.</p>"},{"location":"developer/manual/#geohosting.admin.company.CompanyContactAdmin","title":"geohosting.admin.company.CompanyContactAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Company Contact admin.</p>"},{"location":"developer/manual/#geohosting.admin.attachment","title":"geohosting.admin.attachment","text":""},{"location":"developer/manual/#geohosting.admin.attachment.AttachmentAdmin","title":"geohosting.admin.attachment.AttachmentAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Attachment admin.</p>"},{"location":"developer/manual/#geohosting.admin.attachment.send_attachment","title":"geohosting.admin.attachment.send_attachment","text":"<pre><code>send_attachment(modeladmin, request, queryset)\n</code></pre> <p>Send attachment to erpnext.</p> Source code in <code>geohosting/admin/attachment.py</code> <pre><code>def send_attachment(modeladmin, request, queryset):\n    \"\"\"Send attachment to erpnext.\"\"\"\n    for config in queryset:\n        config.post_to_erpnext()\n</code></pre>"},{"location":"developer/manual/#geohosting.admin.package","title":"geohosting.admin.package","text":""},{"location":"developer/manual/#geohosting.admin.country","title":"geohosting.admin.country","text":""},{"location":"developer/manual/#geohosting.admin.country.CountryAdmin","title":"geohosting.admin.country.CountryAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p>"},{"location":"developer/manual/#geohosting.admin.country.CountryAdmin.changelist_view","title":"changelist_view","text":"<pre><code>changelist_view(request, extra_context=None)\n</code></pre> <p>Changelist view.</p> Source code in <code>geohosting/admin/country.py</code> <pre><code>def changelist_view(self, request, extra_context=None):\n    \"\"\"Changelist view.\"\"\"\n    custom_context = {\n        \"class_name\": \"Country\"\n    }\n    extra_context = extra_context or {}\n    extra_context.update(custom_context)\n    return super().changelist_view(request, extra_context=extra_context)\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext","title":"geohosting.utils.erpnext","text":""},{"location":"developer/manual/#geohosting.utils.erpnext.add_erp_next_comment","title":"geohosting.utils.erpnext.add_erp_next_comment","text":"<pre><code>add_erp_next_comment(\n    user, doctype: str, id: str, comment: str\n)\n</code></pre> <p>Add a comment to ERPNext.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def add_erp_next_comment(user, doctype: str, id: str, comment: str):\n    \"\"\"Add a comment to ERPNext.\"\"\"\n    if not settings.ERPNEXT_BASE_URL:\n        return {\n            \"status\": \"error\",\n            \"message\": 'ERPNEXT_BASE_URL is not set.'\n        }\n\n    url = (\n        f\"{settings.ERPNEXT_BASE_URL}/api/method/\"\n        f\"frappe.desk.form.utils.add_comment\"\n    )\n    data = {\n        \"reference_doctype\": doctype,\n        \"reference_name\": id,\n        \"content\": comment,\n        \"comment_email\": user.email,\n        \"comment_by\": f\"{user.first_name} {user.last_name}\"\n    }\n    try:\n        headers[\"Content-Type\"] = \"application/json\"\n        response = requests.post(\n            url, headers=headers, data=json.dumps(data)\n        )\n\n        response.raise_for_status()\n        response_data = response.json()\n        data = response_data.get(\"data\", {})\n        return {\"status\": \"success\", \"data\": data}\n    except requests.exceptions.HTTPError as err:\n        return {\"status\": \"error\", \"message\": str(err)}\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.download_erp_file","title":"geohosting.utils.erpnext.download_erp_file","text":"<pre><code>download_erp_file(\n    image_path, folder=\"product_images\", filename=None\n)\n</code></pre> <p>Download file from erpnext.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def download_erp_file(image_path, folder='product_images', filename=None):\n    \"\"\"Download file from erpnext.\"\"\"\n    url = f\"{settings.ERPNEXT_BASE_URL}{image_path}\"\n    response = requests.get(url, headers=headers)\n\n    if response.status_code == 200:\n        if not filename:\n            filename = os.path.basename(image_path)\n        content = ContentFile(response.content)\n        saved_path = (\n            default_storage.save(\n                f'{folder}/{filename}',\n                content\n            )\n        )\n        return saved_path\n    else:\n        print(f\"Failed to download image: {url}\")\n        return None\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.fetch_erpnext_data","title":"geohosting.utils.erpnext.fetch_erpnext_data","text":"<pre><code>fetch_erpnext_data(\n    doctype, filters: list = None, fields: list = None\n)\n</code></pre> <p>Fetch data from ERPNext.</p> <p>Parameters:     doctype (str): The document type to fetch the data from.     filters (dict): Filters for the search</p> <p>Returns:     response (dict): The response from the ERPNext API.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def fetch_erpnext_data(\n        doctype, filters: list = None, fields: list = None\n):\n    \"\"\"\n    Fetch data from ERPNext.\n\n    Parameters:\n        doctype (str): The document type to fetch the data from.\n        filters (dict): Filters for the search\n\n    Returns:\n        response (dict): The response from the ERPNext API.\n    \"\"\"\n    if not settings.ERPNEXT_BASE_URL:\n        return {\n            \"status\": \"error\",\n            \"message\": 'ERPNEXT_BASE_URL is not set.'\n        }\n\n    url = f\"{settings.ERPNEXT_BASE_URL}/api/resource/{doctype}\"\n\n    if not fields:\n        fields = [\"*\"]\n    params = {\n        'fields': json.dumps(fields)\n    }\n\n    if filters:\n        params['filters'] = json.dumps(filters)\n\n    all_data = []\n    page = 1\n    page_length = 20\n    max_try = 10\n    current_try = 1\n\n    try:\n        while True:\n            current_try += 1\n            if current_try &gt; max_try:\n                break\n\n            params['limit_start'] = (page - 1) * page_length\n            params['limit_page_length'] = page_length\n\n            response = requests.get(url, headers=headers, params=params)\n\n            if response.status_code == 200:\n                data = response.json()\n                if 'data' in data:\n                    all_data.extend(data['data'])\n                    if len(data['data']) &lt; page_length:\n                        break  # Exit loop if this is the last page\n                    page += 1\n                else:\n                    break  # Exit loop if no data found in response\n            else:\n                return (\n                    f\"Error: Unable to fetch data. Status code: \"\n                    f\"{response.status_code}, \"\n                    f\"Message: {response.text}\"\n                )\n        return all_data\n    except Exception as e:\n        return f\"Exception occurred: {str(e)}\"\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.fetch_erpnext_detail_data","title":"geohosting.utils.erpnext.fetch_erpnext_detail_data","text":"<pre><code>fetch_erpnext_detail_data(doctype, filters=None)\n</code></pre> <p>Fetch erpnext detail data.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def fetch_erpnext_detail_data(doctype, filters=None):\n    \"\"\"Fetch erpnext detail data.\"\"\"\n    if not settings.ERPNEXT_BASE_URL:\n        return {\n            \"status\": \"error\",\n            \"message\": 'ERPNEXT_BASE_URL is not set.'\n        }\n    url = f\"{settings.ERPNEXT_BASE_URL}/api/resource/{doctype}\"\n    params = {\n        'fields': '[\"*\"]'\n    }\n\n    if filters:\n        params['filters'] = json.dumps(filters)\n\n    try:\n        response = requests.get(url, headers=headers, params=params)\n\n        if response.status_code == 200:\n            data = response.json()\n            if 'data' in data:\n                return data['data']\n            return data\n        else:\n            return (\n                f\"Error: Unable to fetch data. Status code: \"\n                f\"{response.status_code}, \"\n                f\"Message: {response.text}\"\n            )\n    except Exception as e:\n        return f\"Exception occurred: {str(e)}\"\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.post_to_erpnext","title":"geohosting.utils.erpnext.post_to_erpnext","text":"<pre><code>post_to_erpnext(data, doctype, file=None)\n</code></pre> <p>Post data to ERPNext and handle conflict if the data already exists.</p> <p>Parameters:     data (dict): The data to post.     doctype (str): The document type to post the data to.     file (file, optional): The file to upload.</p> <p>Returns:     result (dict): The result containing the status and message.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def post_to_erpnext(data, doctype, file=None):\n    \"\"\"Post data to ERPNext and handle conflict if the data already exists.\n\n    Parameters:\n        data (dict): The data to post.\n        doctype (str): The document type to post the data to.\n        file (file, optional): The file to upload.\n\n    Returns:\n        result (dict): The result containing the status and message.\n    \"\"\"\n    if not settings.ERPNEXT_BASE_URL:\n        return {\n            \"status\": \"error\",\n            \"message\": 'ERPNEXT_BASE_URL is not set.'\n        }\n\n    url = f\"{settings.ERPNEXT_BASE_URL}/api/resource/{doctype}\"\n\n    files = {'file': file} if file else None\n\n    log = ErpRequestLog.objects.create(\n        url=url,\n        method=RequestMethod.POST,\n        data=data,\n    )\n\n    try:\n        if files:\n            response = requests.post(\n                url, headers=headers,\n                data=data, files=files\n            )\n        else:\n            headers[\"Content-Type\"] = \"application/json\"\n            response = requests.post(\n                url, headers=headers,\n                data=json.dumps(data)\n            )\n\n        response.raise_for_status()\n        response_data = response.json()\n        record_id = response_data.get(\"data\", {}).get(\"name\")\n\n        log.response_code = response.status_code\n        log.save()\n\n        return {\"status\": \"success\", \"id\": record_id}\n\n    except requests.exceptions.HTTPError as err:\n        log.response_code = err.response.status_code\n        log.response_text = str(err)\n        log.save()\n\n        if response.status_code == 409:\n            return {\"status\": \"conflict\", \"message\": \"Data already exists.\"}\n        else:\n            return {\"status\": \"error\", \"message\": str(err)}\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.put_to_erpnext","title":"geohosting.utils.erpnext.put_to_erpnext","text":"<pre><code>put_to_erpnext(data, doctype, id, file=None)\n</code></pre> <p>Put data to ERPNext.</p> <p>Parameters:     data (dict): The data to post.     doctype (str): The document type to post the data to.     id (str): Id of doc that needs to be put.     file (file, optional): The file to upload.</p> <p>Returns:     result (dict): The result containing the status and message.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def put_to_erpnext(data, doctype, id, file=None):\n    \"\"\"Put data to ERPNext.\n\n    Parameters:\n        data (dict): The data to post.\n        doctype (str): The document type to post the data to.\n        id (str): Id of doc that needs to be put.\n        file (file, optional): The file to upload.\n\n    Returns:\n        result (dict): The result containing the status and message.\n    \"\"\"\n    if not settings.ERPNEXT_BASE_URL:\n        return {\n            \"status\": \"error\",\n            \"message\": 'ERPNEXT_BASE_URL is not set.'\n        }\n\n    url = f\"{settings.ERPNEXT_BASE_URL}/api/resource/{doctype}/{id}\"\n\n    files = {'file': file} if file else None\n\n    log = ErpRequestLog.objects.create(\n        url=url,\n        method=RequestMethod.PUT,\n        data=data,\n    )\n\n    try:\n        if files:\n            response = requests.put(\n                url, headers=headers,\n                data=data, files=files\n            )\n        else:\n            headers[\"Content-Type\"] = \"application/json\"\n            response = requests.put(\n                url, headers=headers,\n                data=json.dumps(data)\n            )\n\n        response.raise_for_status()\n        response_data = response.json()\n        data = response_data.get(\"data\", {})\n\n        log.response_code = response.status_code\n        log.save()\n\n        return {\"status\": \"success\", \"data\": data}\n\n    except requests.exceptions.HTTPError as err:\n        log.response_code = err.response.status_code\n        log.response_text = str(err)\n        log.save()\n\n        return {\"status\": \"error\", \"message\": str(err)}\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.erpnext.test_connection","title":"geohosting.utils.erpnext.test_connection","text":"<pre><code>test_connection()\n</code></pre> <p>Test erpnext connection.</p> Source code in <code>geohosting/utils/erpnext.py</code> <pre><code>def test_connection():\n    \"\"\"Test erpnext connection.\"\"\"\n    url = f\"{settings.ERPNEXT_BASE_URL}/api/resource/Item?limit=1\"\n    return requests.get(url, headers=headers)\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment","title":"geohosting.utils.payment","text":""},{"location":"developer/manual/#geohosting.utils.payment.PaymentGateway","title":"geohosting.utils.payment.PaymentGateway","text":"<pre><code>PaymentGateway(payment_id)\n</code></pre> <p>Payment Gateway.</p> <p>Initialize payment gateway.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def __init__(self, payment_id):\n    \"\"\"Initialize payment gateway.\"\"\"\n    self.payment_id = payment_id\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.PaymentGateway.cancel_subscription","title":"cancel_subscription","text":"<pre><code>cancel_subscription()\n</code></pre> <p>Get subscription id.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def cancel_subscription(self):\n    \"\"\"Get subscription id.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.PaymentGateway.payment_verification","title":"payment_verification","text":"<pre><code>payment_verification()\n</code></pre> <p>Payment verification.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def payment_verification(self):\n    \"\"\"Payment verification.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.PaystackPaymentGateway","title":"geohosting.utils.payment.PaystackPaymentGateway","text":"<pre><code>PaystackPaymentGateway(payment_id)\n</code></pre> <p>               Bases: <code>PaymentGateway</code></p> <p>Paystack Payment Gateway.</p> <p>Initialize payment gateway.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def __init__(self, payment_id):\n    \"\"\"Initialize payment gateway.\"\"\"\n    self.payment_id = payment_id\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.PaystackPaymentGateway.cancel_subscription","title":"cancel_subscription","text":"<pre><code>cancel_subscription()\n</code></pre> <p>Get subscription id.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def cancel_subscription(self):\n    \"\"\"Get subscription id.\"\"\"\n    cancel_paystack_subscription(self.payment_id)\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.PaystackPaymentGateway.payment_verification","title":"payment_verification","text":"<pre><code>payment_verification() -&gt; bool\n</code></pre> <p>Payment verification.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def payment_verification(self) -&gt; bool:\n    \"\"\"Payment verification.\"\"\"\n    response = verify_paystack_payment(self.payment_id)\n    if not response:\n        return False\n    try:\n        if response['data']['status'] == 'success':\n            return True\n    except KeyError:\n        return False\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.StripePaymentGateway","title":"geohosting.utils.payment.StripePaymentGateway","text":"<pre><code>StripePaymentGateway(payment_id)\n</code></pre> <p>               Bases: <code>PaymentGateway</code></p> <p>Stripe Payment Gateway.</p> <p>Initialize payment gateway.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def __init__(self, payment_id):\n    \"\"\"Initialize payment gateway.\"\"\"\n    self.payment_id = payment_id\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.StripePaymentGateway.cancel_subscription","title":"cancel_subscription","text":"<pre><code>cancel_subscription()\n</code></pre> <p>Get subscription id.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def cancel_subscription(self):\n    \"\"\"Get subscription id.\"\"\"\n    cancel_stripe_subscription(self.payment_id)\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.payment.StripePaymentGateway.payment_verification","title":"payment_verification","text":"<pre><code>payment_verification() -&gt; bool\n</code></pre> <p>Payment verification.</p> Source code in <code>geohosting/utils/payment.py</code> <pre><code>def payment_verification(self) -&gt; bool:\n    \"\"\"Payment verification.\"\"\"\n    detail = get_checkout_detail(self.payment_id)\n    if not detail:\n        return False\n    if detail.invoice:\n        return True\n    return False\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.vault","title":"geohosting.utils.vault","text":""},{"location":"developer/manual/#geohosting.utils.vault.get_credentials","title":"geohosting.utils.vault.get_credentials","text":"<pre><code>get_credentials(url, appname: str, params=None)\n</code></pre> <p>Return credentials on vault.</p> Source code in <code>geohosting/utils/vault.py</code> <pre><code>def get_credentials(url, appname: str, params=None):\n    \"\"\"Return credentials on vault.\"\"\"\n    token = get_token()\n    response = requests.get(\n        url + appname,\n        params=params if params else {},\n        headers={\n            'X-Vault-Token': token\n        },\n        verify=False\n    )\n    if response.status_code != 200:\n        raise Exception(f'{response.status_code} - {response.text}')\n    return {\n        key: value for key, value in response.json()['data']['data'].items()\n        if 'pass' in key.lower()\n    }\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.vault.get_token","title":"geohosting.utils.vault.get_token","text":"<pre><code>get_token()\n</code></pre> <p>Get token of vault.</p> Source code in <code>geohosting/utils/vault.py</code> <pre><code>def get_token():\n    \"\"\"Get token of vault.\"\"\"\n    VAULT_BASE_URL = os.environ.get('VAULT_BASE_URL', '')\n    VAULT_ROLE_ID = os.environ.get('VAULT_ROLE_ID', '')\n    VAULT_SECRET_ID = os.environ.get('VAULT_SECRET_ID', '')\n    if not VAULT_BASE_URL:\n        raise Exception('VAULT_BASE_URL environment variable not set')\n    if not VAULT_ROLE_ID:\n        raise Exception('VAULT_ROLE_ID environment variable not set')\n    if not VAULT_SECRET_ID:\n        raise Exception('VAULT_SECRET_ID environment variable not set')\n\n    url = f\"{VAULT_BASE_URL}/v1/auth/kartoza-apps/login\"\n    response = requests.post(\n        url,\n        data={\n            \"role_id\": VAULT_ROLE_ID,\n            \"secret_id\": VAULT_SECRET_ID\n        },\n        verify=False\n    )\n    if response.status_code != 200:\n        raise Exception(response.text)\n    return response.json()['auth']['client_token']\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.stripe","title":"geohosting.utils.stripe","text":"<p>Utility functions for working with stripe.</p>"},{"location":"developer/manual/#geohosting.utils.stripe.cancel_subscription","title":"geohosting.utils.stripe.cancel_subscription","text":"<pre><code>cancel_subscription(checkout_id)\n</code></pre> <p>Cancel subscription.</p> Source code in <code>geohosting/utils/stripe.py</code> <pre><code>def cancel_subscription(checkout_id):\n    \"\"\"Cancel subscription.\"\"\"\n    checkout = get_checkout_detail(checkout_id)\n    stripe.Subscription.modify(\n        checkout['subscription'], cancel_at_period_end=True\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.stripe.create_stripe_price","title":"geohosting.utils.stripe.create_stripe_price","text":"<pre><code>create_stripe_price(\n    name: str,\n    currency: str,\n    amount: Decimal,\n    interval: str,\n    features: list,\n) -&gt; str\n</code></pre> <p>Create a stripe object.</p> <p>Returns:</p> Type Description <code>str</code> <p>Stripe price id</p> Source code in <code>geohosting/utils/stripe.py</code> <pre><code>def create_stripe_price(\n        name: str, currency: str, amount: Decimal, interval: str,\n        features: list\n) -&gt; str:\n    \"\"\"Create a stripe object.\n\n    :rtype: str\n    :return: Stripe price id\n    \"\"\"\n    prices = stripe.Price.list(limit=3, lookup_keys=[name]).data\n    try:\n        price = prices[0]\n    except IndexError:\n        price = stripe.Price.create(\n            currency=currency,\n            unit_amount_decimal=amount * 100,\n            lookup_key=name,\n            recurring={\n                \"interval\": interval\n            },\n            product_data={\n                \"name\": name\n            },\n        )\n\n    try:\n        for feature in features:\n            if not feature:\n                continue\n            try:\n                feature = stripe.entitlements.Feature.list(\n                    lookup_key=feature\n                ).data[0]\n            except IndexError:\n                feature = stripe.entitlements.Feature.create(\n                    name=feature,\n                    lookup_key=feature\n                )\n            try:\n                stripe.Product.create_feature(\n                    price.product,\n                    entitlement_feature=feature,\n                )\n            except stripe._error.InvalidRequestError:\n                pass\n    except (KeyError, ValueError):\n        pass\n    return price.id\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.stripe.get_checkout_detail","title":"geohosting.utils.stripe.get_checkout_detail","text":"<pre><code>get_checkout_detail(checkout_id)\n</code></pre> <p>Return checkout checkout detail.</p> Source code in <code>geohosting/utils/stripe.py</code> <pre><code>def get_checkout_detail(checkout_id):\n    \"\"\"Return checkout checkout detail.\"\"\"\n    try:\n        return stripe.checkout.Session.retrieve(checkout_id)\n    except Exception:\n        return None\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.stripe.test_connection","title":"geohosting.utils.stripe.test_connection","text":"<pre><code>test_connection()\n</code></pre> <p>Test connection to Stripe API.</p> Source code in <code>geohosting/utils/stripe.py</code> <pre><code>def test_connection():\n    \"\"\"Test connection to Stripe API.\"\"\"\n    stripe.Customer.list()['data']\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.paystack","title":"geohosting.utils.paystack","text":"<p>Utility functions for working with paystack.</p>"},{"location":"developer/manual/#geohosting.utils.paystack.cancel_subscription","title":"geohosting.utils.paystack.cancel_subscription","text":"<pre><code>cancel_subscription(reference)\n</code></pre> <p>Cancel subscription.</p> Source code in <code>geohosting/utils/paystack.py</code> <pre><code>def cancel_subscription(reference):\n    \"\"\"Cancel subscription.\"\"\"\n    subscription = get_subscription(reference)\n    if not subscription:\n        raise AttributeError('Subscription not found')\n    subscription = Subscription.fetch(subscription['subscription_code'])\n    Subscription.disable(\n        code=subscription['data']['subscription_code'],\n        token=subscription['data']['email_token'],\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.paystack.create_paystack_price","title":"geohosting.utils.paystack.create_paystack_price","text":"<pre><code>create_paystack_price(\n    name: str,\n    currency: str,\n    amount: Decimal,\n    interval: str,\n    features: list,\n) -&gt; str\n</code></pre> <p>Create a paystack object.</p> <p>Returns:</p> Type Description <code>str</code> <p>Paystack price id</p> Source code in <code>geohosting/utils/paystack.py</code> <pre><code>def create_paystack_price(\n        name: str, currency: str, amount: Decimal, interval: str,\n        features: list\n) -&gt; str:\n    \"\"\"Create a paystack object.\n\n    :rtype: str\n    :return: Paystack price id\n    \"\"\"\n    plans = [\n        plan for plan in Plan.list()['data'] if\n        not plan['is_deleted'] and not plan['is_archived']\n    ]\n    for plan in plans:\n        if plan['name'] == name:\n            return plan['id']\n    response = Plan.create(\n        name=name,\n        description=f'Features: {features}',\n        amount=float(amount * 100),\n        interval=interval,\n        currency=currency\n    )\n    if not response['status']:\n        raise Exception(response['message'])\n    return response['data']['id']\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.paystack.get_subscription","title":"geohosting.utils.paystack.get_subscription","text":"<pre><code>get_subscription(reference)\n</code></pre> <p>Get subscription.</p> Source code in <code>geohosting/utils/paystack.py</code> <pre><code>def get_subscription(reference):\n    \"\"\"Get subscription.\"\"\"\n    transaction = verify_paystack_payment(reference)\n    customer = transaction['data']['customer']['id']\n    plan = transaction['data']['plan_object']['id']\n    authorization_code = transaction['data']['authorization'][\n        'authorization_code'\n    ]\n    # Fetch subscriptions for the customer\n    subscriptions = Subscription.list(\n        customer=customer, plan=plan\n    )\n\n    for subscription in subscriptions['data']:\n        if subscription['authorization'][\n            'authorization_code'] == authorization_code:\n            return subscription\n    return None\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.paystack.test_connection","title":"geohosting.utils.paystack.test_connection","text":"<pre><code>test_connection()\n</code></pre> <p>Test connection to Paystack API.</p> Source code in <code>geohosting/utils/paystack.py</code> <pre><code>def test_connection():\n    \"\"\"Test connection to Paystack API.\"\"\"\n    response = Plan.list()\n    if not response['status']:\n        raise ConnectionError(response['message'])\n</code></pre>"},{"location":"developer/manual/#geohosting.utils.paystack.verify_paystack_payment","title":"geohosting.utils.paystack.verify_paystack_payment","text":"<pre><code>verify_paystack_payment(reference)\n</code></pre> <p>Return if the reference is valid.</p> Source code in <code>geohosting/utils/paystack.py</code> <pre><code>def verify_paystack_payment(reference):\n    \"\"\"Return if the reference is valid.\"\"\"\n    return Transaction.verify(reference)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.sales_order","title":"geohosting.api.sales_order","text":""},{"location":"developer/manual/#geohosting.api.sales_order.CheckAppNameAPI","title":"geohosting.api.sales_order.CheckAppNameAPI","text":"<p>               Bases: <code>APIView</code></p> <p>Check validity of app name.</p>"},{"location":"developer/manual/#geohosting.api.sales_order.CheckAppNameAPI.post","title":"post","text":"<pre><code>post(request)\n</code></pre> <p>Create token for logged in user.</p> Source code in <code>geohosting/api/sales_order.py</code> <pre><code>def post(self, request):\n    \"\"\"Create token for logged in user.\"\"\"\n    try:\n        app_name = request.data['app_name']\n        name_validator(app_name)\n        app_name_validator(app_name)\n        return Response('OK')\n    except (ValueError, ValidationError) as e:\n        return HttpResponseBadRequest(e)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderPaymentAPI","title":"geohosting.api.sales_order.SalesOrderPaymentAPI","text":"<p>               Bases: <code>PaymentAPI</code></p> <p>API checkout session.</p>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderPaymentAPI.post","title":"post","text":"<pre><code>post(request, pk)\n</code></pre> <p>Post to create checkout session.</p> Source code in <code>geohosting/api/sales_order.py</code> <pre><code>def post(self, request, pk):\n    \"\"\"Post to create checkout session.\"\"\"\n    try:\n        app_name = request.data['app_name']\n        name_validator(app_name)\n        app_name_validator(app_name)\n    except (ValueError, ValidationError) as e:\n        return HttpResponseBadRequest(e)\n    order = get_object_or_404(SalesOrder, pk=pk)\n    order.app_name = app_name\n    order.payment_id = None\n    order.payment_method = self.payment_method\n    order.save()\n    return self.get_post(order=order)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderPaymentPaystackSessionAPI","title":"geohosting.api.sales_order.SalesOrderPaymentPaystackSessionAPI","text":"<p>               Bases: <code>PaymentPaystackSessionAPI</code>, <code>SalesOrderPaymentAPI</code></p> <p>API creating paystack checkout session.</p>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderPaymentStripeSessionAPI","title":"geohosting.api.sales_order.SalesOrderPaymentStripeSessionAPI","text":"<p>               Bases: <code>PaymentStripeSessionAPI</code>, <code>SalesOrderPaymentAPI</code></p> <p>API creating stripe checkout session.</p>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderSetView","title":"geohosting.api.sales_order.SalesOrderSetView","text":"<p>               Bases: <code>FilteredAPI</code>, <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>DestroyModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderSetView.get_object","title":"get_object","text":"<pre><code>get_object()\n</code></pre> <p>Get object.</p> Source code in <code>geohosting/api/sales_order.py</code> <pre><code>def get_object(self):\n    \"\"\"Get object.\"\"\"\n    obj = super().get_object()\n    obj.update_payment_status()\n    return obj\n</code></pre>"},{"location":"developer/manual/#geohosting.api.sales_order.SalesOrderSetView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return querysets.</p> Source code in <code>geohosting/api/sales_order.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return querysets.\"\"\"\n    query = SalesOrder.objects.filter(customer_id=self.request.user.id)\n    q = self.request.GET.get('q')\n    if q:\n        query = query.filter(\n            Q(erpnext_code__icontains=q) | Q(app_name__icontains=q)\n        )\n    return self.filter_query(self.request, query).order_by('-date')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.product","title":"geohosting.api.product","text":""},{"location":"developer/manual/#geohosting.api.activity","title":"geohosting.api.activity","text":"<p>GeoHosting Controller.</p> <p>.. note:: Activity.</p>"},{"location":"developer/manual/#geohosting.api.activity.ActivityTypeViewSet","title":"geohosting.api.activity.ActivityTypeViewSet","text":"<p>               Bases: <code>ListModelMixin</code>, <code>RetrieveModelMixin</code>, <code>GenericViewSet</code></p> <p>Activity ViewSet.</p>"},{"location":"developer/manual/#geohosting.api.activity.ActivityViewSet","title":"geohosting.api.activity.ActivityViewSet","text":"<p>               Bases: <code>ListModelMixin</code>, <code>RetrieveModelMixin</code>, <code>GenericViewSet</code></p> <p>Activity ViewSet.</p>"},{"location":"developer/manual/#geohosting.api.webhook","title":"geohosting.api.webhook","text":"<p>GeoHosting Controller.</p> <p>.. note:: Webhooks.</p>"},{"location":"developer/manual/#geohosting.api.webhook.WebhookView","title":"geohosting.api.webhook.WebhookView","text":"<p>               Bases: <code>APIView</code></p> <p>Webhook receiver.</p>"},{"location":"developer/manual/#geohosting.api.webhook.WebhookView.post","title":"post","text":"<pre><code>post(request)\n</code></pre> <p>Create new instance.</p> Source code in <code>geohosting/api/webhook.py</code> <pre><code>def post(self, request):\n    \"\"\"Create new instance.\"\"\"\n    data = request.data\n    webhook = WebhookEvent.objects.create(data=data)\n    try:\n        status = data.get('Status', data.get('status'))\n        if status is None:\n            raise KeyError(\n                \"Neither 'Status' nor 'status' key found in data\"\n            )\n        status = status.lower()\n\n        source = data.get('Source', data.get('source'))\n        if source is None:\n            raise KeyError(\n                \"Neither 'Source' nor 'source' key found in data\"\n            )\n        source = source.lower()\n\n        # Don't do anything if it is still running\n        if status in [WebhookStatus.RUNNING]:\n            return Response()\n        if source != self.ARGO_CD:\n            return Response()\n\n        app_name = re.sub(\n            r'^(devops-|gsh-)', '', data['app_name']\n        )\n        webhook.app_name = app_name\n        webhook.save()\n        instance = Instance.objects.exclude(\n            status=InstanceStatus.DELETED\n        ).get(name=app_name)\n\n        # Get the activity\n        activity = Activity.objects.filter(\n            instance=instance, status=ActivityStatus.BUILD_ARGO\n        ).first()\n        if not activity:\n            activity = Activity.objects.filter(\n                instance=instance, status=ActivityStatus.ERROR\n            ).last()\n        if not activity:\n            raise Activity.DoesNotExist()\n        webhook.activity = activity\n        webhook.save()\n\n        # If error\n        if status in [\n            WebhookStatus.ERROR, WebhookStatus.FAILED,\n            WebhookStatus.OUT_OF_SYNC, WebhookStatus.UNKNOWN\n        ]:\n            activity.note = data.get('Message', 'Error on Argo CD')\n            activity.update_status(ActivityStatus.ERROR)\n            return Response()\n\n        # If it is synced\n        if status not in [\n            WebhookStatus.SUCCESS, WebhookStatus.SUCCEEDED,\n            WebhookStatus.SYNCED, WebhookStatus.DELETED\n        ]:\n            raise KeyError('Status does not found')\n\n        # This is for deployment\n        if activity.is_deletion and status != WebhookStatus.DELETED:\n            return Response()\n        activity.note = json.dumps(data)\n        activity.update_status(ActivityStatus.SUCCESS)\n        activity.save()\n\n    except (\n            KeyError, Instance.DoesNotExist, Activity.DoesNotExist,\n            Package.DoesNotExist\n    ) as e:\n        webhook.note = f'{e}'\n        webhook.save()\n        return HttpResponseBadRequest(f'{e}')\n    except Exception as e:\n        print(e)\n        webhook.note = f'{e}'\n        webhook.save()\n        return HttpResponseServerError(f'{e}')\n\n    return Response()\n</code></pre>"},{"location":"developer/manual/#geohosting.api.instance","title":"geohosting.api.instance","text":""},{"location":"developer/manual/#geohosting.api.instance.InstanceViewSet","title":"geohosting.api.instance.InstanceViewSet","text":"<p>               Bases: <code>FilteredAPI</code>, <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>ViewSet for fetching user instances.</p>"},{"location":"developer/manual/#geohosting.api.instance.InstanceViewSet.destroy","title":"destroy","text":"<pre><code>destroy(request, *args, **kwargs)\n</code></pre> <p>Destroy an instance.</p> Source code in <code>geohosting/api/instance.py</code> <pre><code>def destroy(self, request, *args, **kwargs):\n    \"\"\"Destroy an instance.\"\"\"\n    instance = self.get_object()\n    form = DeletingInstanceForm({'application': instance})\n    form.user = self.request.user\n    if form.is_valid():\n        form.save()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n    else:\n        errors = []\n        for key, value in form.errors.items():\n            errors.append(str(value[0]))\n        return HttpResponseBadRequest(f'{\",\".join(errors)}')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.instance.InstanceViewSet.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return instances for the authenticated user.</p> Source code in <code>geohosting/api/instance.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return instances for the authenticated user.\"\"\"\n    query = Instance.objects.filter(owner=self.request.user).order_by(\n        'name'\n    )\n    return self.filter_query(self.request, query)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.payment","title":"geohosting.api.payment","text":"<p>Payment API.</p>"},{"location":"developer/manual/#geohosting.api.payment.PaymentAPI","title":"geohosting.api.payment.PaymentAPI","text":"<p>               Bases: <code>APIView</code></p> <p>API checkout session.</p>"},{"location":"developer/manual/#geohosting.api.payment.PaymentAPI.payment_method","title":"payment_method  <code>property</code>","text":"<pre><code>payment_method\n</code></pre> <p>Return payment method.</p>"},{"location":"developer/manual/#geohosting.api.payment.PaymentAPI.create_payload","title":"create_payload","text":"<pre><code>create_payload(\n    email, package: Package, callback_url\n) -&gt; (int, str)\n</code></pre> <p>Create payload of data from gateway.</p> <p>Return id of payment and string of challenge.</p> Source code in <code>geohosting/api/payment.py</code> <pre><code>def create_payload(\n        self, email, package: Package, callback_url\n) -&gt; (int, str):\n    \"\"\"Create payload of data from gateway.\n\n    Return id of payment and string of challenge.\n    \"\"\"\n    raise NotImplemented\n</code></pre>"},{"location":"developer/manual/#geohosting.api.payment.PaymentAPI.get_post","title":"get_post","text":"<pre><code>get_post(order: SalesOrder)\n</code></pre> <p>Get post response.</p> Source code in <code>geohosting/api/payment.py</code> <pre><code>def get_post(self, order: SalesOrder):\n    \"\"\"Get post response.\"\"\"\n    domain = self.request.build_absolute_uri('/')\n    try:\n        callback_url = f'{domain}#/orders/{order.id}/deployment'\n        _id, payload = self.create_payload(\n            self.request.user.email, order.package, callback_url\n        )\n        order.payment_id = _id\n        order.payment_method = self.payment_method\n        order.save()\n        return JsonResponse({\n            \"key\": payload,\n            \"success_url\": callback_url\n        })\n    except Exception as e:\n        return HttpResponseServerError(f'{e}')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.payment.PaymentAPI.post","title":"post","text":"<pre><code>post(request, pk)\n</code></pre> <p>Post to create checkout session.</p> Source code in <code>geohosting/api/payment.py</code> <pre><code>def post(self, request, pk):\n    \"\"\"Post to create checkout session.\"\"\"\n    package = get_object_or_404(Package, pk=pk)\n    domain = request.build_absolute_uri('/')\n    try:\n        order = SalesOrder.objects.create(\n            package=package,\n            customer=request.user\n        )\n        callback_url = f'{domain}#/orders/{order.id}/deployment'\n        _id, payload = self.create_payload(\n            request.user.email, package, callback_url\n        )\n        order.payment_id = _id\n        order.payment_method = self.payment_method\n        order.save()\n        return JsonResponse({\n            \"key\": payload,\n            \"success_url\": callback_url\n        })\n    except Exception as e:\n        return HttpResponseServerError(f'{e}')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.payment.PaymentPaystackSessionAPI","title":"geohosting.api.payment.PaymentPaystackSessionAPI","text":"<p>API creating paystack checkout session.</p>"},{"location":"developer/manual/#geohosting.api.payment.PaymentPaystackSessionAPI.create_payload","title":"create_payload","text":"<pre><code>create_payload(\n    email, package: Package, callback_url\n) -&gt; (int, str)\n</code></pre> <p>Create payload of data from gateway.</p> <p>Return id of payment and string of challenge.</p> Source code in <code>geohosting/api/payment.py</code> <pre><code>def create_payload(\n        self, email, package: Package, callback_url\n) -&gt; (int, str):\n    \"\"\"Create payload of data from gateway.\n\n    Return id of payment and string of challenge.\n    \"\"\"\n    plan = Plan.get(package.get_paystack_price_id())['data']\n    transaction = Transaction.initialize(\n        email=email,\n        amount=float(package.price * 100),\n        plan=plan['plan_code']\n    )['data']\n    return transaction['reference'], transaction['access_code']\n</code></pre>"},{"location":"developer/manual/#geohosting.api.payment.PaymentStripeSessionAPI","title":"geohosting.api.payment.PaymentStripeSessionAPI","text":"<p>API creating stripe checkout session.</p>"},{"location":"developer/manual/#geohosting.api.payment.PaymentStripeSessionAPI.create_payload","title":"create_payload","text":"<pre><code>create_payload(\n    email, package: Package, callback_url\n) -&gt; (int, str)\n</code></pre> <p>Create payload of data from gateway.</p> <p>Return id of payment and string of challenge.</p> Source code in <code>geohosting/api/payment.py</code> <pre><code>def create_payload(\n        self, email, package: Package, callback_url\n) -&gt; (int, str):\n    \"\"\"Create payload of data from gateway.\n\n    Return id of payment and string of challenge.\n    \"\"\"\n    price_id = package.get_stripe_price_id()\n    checkout = stripe.checkout.Session.create(\n        ui_mode='embedded',\n        customer_email=email,\n        line_items=[\n            {\n                'price': price_id,\n                'quantity': 1,\n            },\n        ],\n        mode='subscription',\n        return_url=callback_url\n    )\n    return checkout.id, checkout.client_secret\n</code></pre>"},{"location":"developer/manual/#geohosting.api.erp","title":"geohosting.api.erp","text":"<p>GeoHosting Controller.</p> <p>.. note:: ERP Api View.</p>"},{"location":"developer/manual/#geohosting.api.erp.ERPApiView","title":"geohosting.api.erp.ERPApiView","text":"<p>               Bases: <code>APIView</code></p> <p>ERP API.</p>"},{"location":"developer/manual/#geohosting.api.erp.ERPApiView.get","title":"get","text":"<pre><code>get(request)\n</code></pre> <p>Create new instance.</p> Source code in <code>geohosting/api/erp.py</code> <pre><code>def get(self, request):\n    \"\"\"Create new instance.\"\"\"\n    try:\n        class_name = request.GET.get('class-name')\n        if class_name:\n            apps.get_model('geohosting', class_name)\n            sync_erp_data.delay(class_name)\n\n            messages.add_message(\n                request,\n                messages.SUCCESS,\n                'Initiated syncing data from fetch in the background.'\n            )\n        else:\n            messages.add_message(\n                request,\n                messages.ERROR,\n                'class-name cannot be empty.'\n            )\n        return Response()\n    except Exception as e:\n        messages.add_message(\n            request,\n            messages.ERROR,\n            f'{e}'\n        )\n        return HttpResponseBadRequest(e)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.user","title":"geohosting.api.user","text":"<p>GeoHosting Controller.</p> <p>.. note:: User.</p>"},{"location":"developer/manual/#geohosting.api.user.ChangePasswordView","title":"geohosting.api.user.ChangePasswordView","text":"<p>               Bases: <code>APIView</code></p> <p>Change password view.</p>"},{"location":"developer/manual/#geohosting.api.user.ChangePasswordView.put","title":"put","text":"<pre><code>put(request)\n</code></pre> <p>Put method to change password.</p> Source code in <code>geohosting/api/user.py</code> <pre><code>def put(self, request):\n    \"\"\"Put method to change password.\"\"\"\n    try:\n        password = request.data['old_password']\n        new_password = request.data['new_password']\n\n        user = request.user\n        if not user.check_password(raw_password=password):\n            return HttpResponseBadRequest('Old password is not correct.')\n        else:\n            user.set_password(new_password)\n            user.save()\n            return Response('password changed successfully')\n    except KeyError as e:\n        return HttpResponseBadRequest(f'{e} is required')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.user.UserProfileView","title":"geohosting.api.user.UserProfileView","text":"<p>               Bases: <code>APIView</code></p> <p>User Profile view.</p>"},{"location":"developer/manual/#geohosting.api.user.UserProfileView.get","title":"get","text":"<pre><code>get(request)\n</code></pre> <p>Get user profile.</p> Source code in <code>geohosting/api/user.py</code> <pre><code>def get(self, request):\n    \"\"\"Get user profile.\"\"\"\n    return Response(UserSerializer(request.user).data)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.user.UserProfileView.put","title":"put","text":"<pre><code>put(request)\n</code></pre> <p>Put method to change password.</p> Source code in <code>geohosting/api/user.py</code> <pre><code>def put(self, request):\n    \"\"\"Put method to change password.\"\"\"\n    try:\n        data = request.data\n\n        # If it is payload, we need to use it as data\n        if data.get('payload'):\n            try:\n                data = json.loads(data.get('payload'))\n            except json.JSONDecodeError:\n                return HttpResponseBadRequest('payload is invalid json')\n        user = request.user\n        serializer = UserSerializer(user, data=data)\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n\n        try:\n            user.userprofile.avatar = request.FILES['avatar']\n            user.userprofile.save()\n        except KeyError:\n            pass\n\n        # Save billing information\n        billing_data = data.get('billing_information', None)\n        if billing_data:\n            country = billing_data.get('country', None)\n            country_obj = None\n            if country:\n                try:\n                    country_obj = Country.objects.get(\n                        name=country\n                    )\n                    billing_data['country'] = country_obj\n                except Country.DoesNotExist:\n                    return HttpResponseBadRequest(\n                        f'Country {country} does not exist'\n                    )\n            billing_data['user'] = user.pk\n            billing = user.userbillinginformation\n            billing_serializer = UserBillingInformationSerializer(\n                billing, data=billing_data\n            )\n            billing_serializer.is_valid(raise_exception=True)\n            billing_serializer.save()\n            billing.country = country_obj\n            billing.save()\n        else:\n            billing = user.userbillinginformation\n            billing.emptying()\n\n        threading.Thread(\n            target=user.userprofile.post_to_erpnext\n        ).start()\n        return Response(serializer.data)\n    except KeyError as e:\n        return HttpResponseBadRequest(f'{e} is required')\n</code></pre>"},{"location":"developer/manual/#geohosting.api.agreement","title":"geohosting.api.agreement","text":""},{"location":"developer/manual/#geohosting.api.agreement.AgreementViewSet","title":"geohosting.api.agreement.AgreementViewSet","text":"<p>               Bases: <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.agreement.AgreementViewSet.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return instances for the authenticated user.</p> Source code in <code>geohosting/api/agreement.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return instances for the authenticated user.\"\"\"\n    return AgreementDetail.objects.select_related(\n        'agreement'\n    ).order_by('agreement', '-version').distinct(\n        'agreement'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.api.agreement.MyAgreementViewSet","title":"geohosting.api.agreement.MyAgreementViewSet","text":"<p>               Bases: <code>FilteredAPI</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.agreement.MyAgreementViewSet.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return instances for the authenticated user.</p> Source code in <code>geohosting/api/agreement.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return instances for the authenticated user.\"\"\"\n    return SalesOrderAgreement.objects.select_related(\n        'agreement_detail', 'sales_order'\n    ).filter(sales_order__customer=self.request.user).order_by(\n        '-created_at'\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.api.company","title":"geohosting.api.company","text":""},{"location":"developer/manual/#geohosting.api.company.CompanyViewSet","title":"geohosting.api.company.CompanyViewSet","text":"<p>               Bases: <code>FilteredAPI</code>, <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>DestroyModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.company.CompanyViewSet.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return instances for the authenticated user.</p> Source code in <code>geohosting/api/company.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return instances for the authenticated user.\"\"\"\n    contact = CompanyContact.objects.filter(\n        user=self.request.user\n    )\n    query = Company.objects.filter(\n        id__in=contact.values_list('id', flat=True)\n    )\n    return self.filter_query(self.request, query)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.token","title":"geohosting.api.token","text":"<p>GeoHosting Controller.</p> <p>.. note:: Knox.</p>"},{"location":"developer/manual/#geohosting.api.token.CreateToken","title":"geohosting.api.token.CreateToken","text":"<p>               Bases: <code>APIView</code></p> <p>Create token.</p>"},{"location":"developer/manual/#geohosting.api.token.CreateToken.post","title":"post","text":"<pre><code>post(request)\n</code></pre> <p>Create token for logged in user.</p> Source code in <code>geohosting/api/token.py</code> <pre><code>def post(self, request):\n    \"\"\"Create token for logged in user.\"\"\"\n    AuthToken.objects.filter(user=request.user).delete()\n    obj, token = AuthToken.objects.create(\n        user=request.user\n    )\n    return Response(token)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.checkout","title":"geohosting.api.checkout","text":"<p>Checkout API.</p>"},{"location":"developer/manual/#geohosting.api.checkout.CheckoutAPI","title":"geohosting.api.checkout.CheckoutAPI","text":"<p>               Bases: <code>PaymentAPI</code></p> <p>API checkout session.</p>"},{"location":"developer/manual/#geohosting.api.checkout.CheckoutAPI.post","title":"post","text":"<pre><code>post(request, pk)\n</code></pre> <p>Post to create checkout session.</p> Source code in <code>geohosting/api/checkout.py</code> <pre><code>def post(self, request, pk):\n    \"\"\"Post to create checkout session.\"\"\"\n    try:\n        app_name = request.data['app_name']\n        company_name = request.data['company_name']\n        agreement_ids = json.loads(request.data['agreement_ids'])\n        if company_name:\n            company = Company.objects.get(name=company_name)\n        else:\n            company = None\n        name_validator(app_name)\n        app_name_validator(app_name)\n    except (ValueError, ValidationError) as e:\n        return HttpResponseBadRequest(e)\n    package = get_object_or_404(Package, pk=pk)\n\n    # Create order\n    order = SalesOrder.objects.create(\n        package=package,\n        customer=request.user,\n        app_name=app_name,\n        company=company,\n        payment_method=self.payment_method\n    )\n    for agreement_id in agreement_ids:\n        file = None\n        try:\n            file = request.FILES.getlist(f'agreement-{agreement_id}')[0]\n        except IndexError:\n            pass\n        SalesOrderAgreement.objects.create(\n            agreement_detail=AgreementDetail.objects.get(pk=agreement_id),\n            sales_order=order,\n            file=file\n        )\n    return self.get_post(order=order)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.checkout.CheckoutPaystackSessionAPI","title":"geohosting.api.checkout.CheckoutPaystackSessionAPI","text":"<p>               Bases: <code>PaymentPaystackSessionAPI</code>, <code>CheckoutAPI</code></p> <p>API creating paystack checkout session.</p>"},{"location":"developer/manual/#geohosting.api.checkout.CheckoutStripeSessionAPI","title":"geohosting.api.checkout.CheckoutStripeSessionAPI","text":"<p>               Bases: <code>PaymentStripeSessionAPI</code>, <code>CheckoutAPI</code></p> <p>API creating stripe checkout session.</p>"},{"location":"developer/manual/#geohosting.api.support","title":"geohosting.api.support","text":"<p>GeoHosting Controller.</p> <p>.. note:: Ticket.</p>"},{"location":"developer/manual/#geohosting.api.support.AttachmentSetView","title":"geohosting.api.support.AttachmentSetView","text":"<p>               Bases: <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.support.AttachmentSetView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return querysets.</p> Source code in <code>geohosting/api/support.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return querysets.\"\"\"\n    user_email = self.request.user.email\n    return Attachment.objects.filter(\n        ticket___customer=user_email\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.api.support.AttachmentSetView.get_serializer","title":"get_serializer","text":"<pre><code>get_serializer(*args, **kwargs)\n</code></pre> <p>Return serializer.</p> Source code in <code>geohosting/api/support.py</code> <pre><code>def get_serializer(self, *args, **kwargs):\n    \"\"\"Return serializer.\"\"\"\n    try:\n        kwargs['data'] = self.request.data.copy()\n        kwargs['data']['ticket'] = self.kwargs.get('tickets_pk')\n    except KeyError:\n        pass\n    return super().get_serializer(*args, **kwargs)\n</code></pre>"},{"location":"developer/manual/#geohosting.api.support.TicketSetView","title":"geohosting.api.support.TicketSetView","text":"<p>               Bases: <code>FilteredAPI</code>, <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.support.TicketSetView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return querysets.</p> Source code in <code>geohosting/api/support.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return querysets.\"\"\"\n    user_email = None\n    try:\n        user_email = self.request.user.email\n        # TODO:\n        #  Need to put this on a ticket level\n        query = Ticket.objects.filter(customer=user_email)\n    except AttributeError:\n        query = Ticket.objects.none()\n    queryset = self.filter_query(self.request, query).order_by(\n        '-updated_at'\n    )\n    if user_email:\n        Ticket.fetch_ticket_from_erp(\n            user_email,\n            list(queryset.values_list('erpnext_code', flat=True))\n        )\n    return queryset\n</code></pre>"},{"location":"developer/manual/#geohosting.api.country","title":"geohosting.api.country","text":""},{"location":"developer/manual/#geohosting.api.country.CountryViewSet","title":"geohosting.api.country.CountryViewSet","text":"<p>               Bases: <code>FilteredAPI</code>, <code>CreateModelMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>DestroyModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Sales order viewset.</p>"},{"location":"developer/manual/#geohosting.api.country.CountryViewSet.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return querysets.</p> Source code in <code>geohosting/api/country.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return querysets.\"\"\"\n    query = Country.objects.all()\n    return self.filter_query(self.request, query).filter(\n        code__isnull=False\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.billing_information","title":"geohosting.models.billing_information","text":""},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation","title":"geohosting.models.billing_information.BillingInformation","text":"<p>               Bases: <code>ErpModel</code></p> <p>Billing information model.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.country_name","title":"country_name  <code>property</code>","text":"<pre><code>country_name\n</code></pre> <p>Return the country name.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.customer_name","title":"customer_name  <code>property</code>","text":"<pre><code>customer_name\n</code></pre> <p>Return customer name.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.billing_information.BillingInformation.emptying","title":"emptying","text":"<pre><code>emptying()\n</code></pre> <p>Empty data.</p> Source code in <code>geohosting/models/billing_information.py</code> <pre><code>def emptying(self):\n    \"\"\"Empty data.\"\"\"\n    self.name = None\n    self.postal_code = None\n    self.address = None\n    self.country = None\n    self.city = None\n    self.region = None\n    self.tax_number = None\n    self.save()\n</code></pre>"},{"location":"developer/manual/#geohosting.models._data_types","title":"geohosting.models._data_types","text":""},{"location":"developer/manual/#geohosting.models.sales_order","title":"geohosting.models.sales_order","text":""},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder","title":"geohosting.models.sales_order.SalesOrder","text":"<p>               Bases: <code>ErpModel</code></p> <p>Sales Order.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.invoice_url","title":"invoice_url  <code>property</code>","text":"<pre><code>invoice_url\n</code></pre> <p>Return invoice url when the status is not payment anymore.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.payment_gateway","title":"payment_gateway  <code>property</code>","text":"<pre><code>payment_gateway: PaymentGateway\n</code></pre> <p>Return payment gateway.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.sales_order_status_obj","title":"sales_order_status_obj  <code>property</code>","text":"<pre><code>sales_order_status_obj: _SalesOrderStatusObject\n</code></pre> <p>Return sales order status object.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.add_comment","title":"add_comment","text":"<pre><code>add_comment(comment, is_error=False)\n</code></pre> <p>Add comment.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def add_comment(self, comment, is_error=False):\n    \"\"\"Add comment.\"\"\"\n    if is_error:\n        LogTracker.error(self, comment)\n    else:\n        LogTracker.success(self, comment)\n\n    if self.erpnext_code:\n        add_erp_next_comment(\n            self.customer, self.doc_type, self.erpnext_code, comment\n        )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.auto_deploy","title":"auto_deploy","text":"<pre><code>auto_deploy()\n</code></pre> <p>Change status to deployment and do deployment.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def auto_deploy(self):\n    \"\"\"Change status to deployment and do deployment.\"\"\"\n    from geohosting.forms.activity.create_instance import (\n        CreateInstanceForm\n    )\n    # Check if order status is waiting configuration\n    if self.app_name and self.erpnext_code:\n        if self.order_status != SalesOrderStatus.WAITING_CONFIGURATION:\n            self.add_comment(f\"App name : {self.app_name}\")\n        self.set_order_status(SalesOrderStatus.WAITING_DEPLOYMENT)\n\n        # TODO:\n        #  When we have multi region, we will change below\n        #  Link region to sales order\n        form = CreateInstanceForm(\n            {\n                'region': Region.default_region(),\n                'app_name': self.app_name,\n                'package': self.package,\n                'sales_order': self\n            }\n        )\n        form.user = self.customer\n        if not form.is_valid():\n            errors = []\n            for key, val in form.errors.items():\n                errors += val\n            self.add_comment(\n                f'AUTO DEPLOY ERROR: {\", \".join(errors)}',\n                is_error=True\n            )\n        else:\n            form.save()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.cancel_subscription","title":"cancel_subscription","text":"<pre><code>cancel_subscription()\n</code></pre> <p>Cancel subscription.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def cancel_subscription(self):\n    \"\"\"Cancel subscription.\"\"\"\n    if not self.payment_id:\n        return\n    self.payment_gateway.cancel_subscription()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save model.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Save model.\"\"\"\n    super(SalesOrder, self).save(*args, **kwargs)\n    # Push to erp\n    result = self.post_to_erpnext()\n    if result['status'] != 'success':\n        raise Exception(result['message'])\n\n    # Check if order status is waiting configuration\n    order_status_obj = self.sales_order_status_obj\n    if order_status_obj == SalesOrderStatus.WAITING_CONFIGURATION:\n        self.auto_deploy()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.set_order_status","title":"set_order_status","text":"<pre><code>set_order_status(new: _SalesOrderStatusObject)\n</code></pre> <p>Set order status from _SalesOrderStatusObject.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def set_order_status(self, new: _SalesOrderStatusObject):\n    \"\"\"Set order status from _SalesOrderStatusObject.\"\"\"\n    self.order_status = new.key\n    self.save()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrder.update_payment_status","title":"update_payment_status","text":"<pre><code>update_payment_status()\n</code></pre> <p>Update payment status based on the checkout detail from payment.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>def update_payment_status(self):\n    \"\"\"Update payment status based on the checkout detail from payment.\"\"\"\n    if (\n            self.sales_order_status_obj == SalesOrderStatus.WAITING_PAYMENT\n            and self.payment_id\n    ):\n        if self.payment_gateway.payment_verification():\n            self.set_order_status(\n                SalesOrderStatus.WAITING_CONFIGURATION\n            )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrderPaymentMethod","title":"geohosting.models.sales_order.SalesOrderPaymentMethod","text":"<p>Order payment method.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrderStatus","title":"geohosting.models.sales_order.SalesOrderStatus","text":"<p>Order Status.</p>"},{"location":"developer/manual/#geohosting.models.sales_order.SalesOrderStatus.obj_by_key","title":"obj_by_key  <code>staticmethod</code>","text":"<pre><code>obj_by_key(key: str) -&gt; _SalesOrderStatusObject\n</code></pre> <p>Return object status from key.</p> Source code in <code>geohosting/models/sales_order.py</code> <pre><code>@staticmethod\ndef obj_by_key(key: str) -&gt; _SalesOrderStatusObject:\n    \"\"\"Return object status from key.\"\"\"\n    for attr in SalesOrderStatus.sales_order_status_object_attributes():\n        if attr.key == key:\n            return attr\n    return SalesOrderStatus.WAITING_PAYMENT\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product","title":"geohosting.models.product","text":"<p>GeoHosting.</p> <p>.. note:: Product model.</p>"},{"location":"developer/manual/#geohosting.models.product.Product","title":"geohosting.models.product.Product","text":"<p>               Bases: <code>Model</code></p> <p>Product model.</p>"},{"location":"developer/manual/#geohosting.models.product.Product.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return product name.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>def __str__(self):\n    \"\"\"Return product name.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product.Product.generate_data","title":"generate_data","text":"<pre><code>generate_data()\n</code></pre> <p>Generate data.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>def generate_data(self):\n    \"\"\"Generate data.\"\"\"\n    from geohosting.models.activity import (\n        ActivityType, ActivityTypeMapping\n    )\n    from geohosting_controller.default_data import (\n        get_jenkin_activity_types, get_product_clusters\n    )\n\n    jenkins_config = get_jenkin_activity_types()\n    product_cluster = get_product_clusters()\n\n    # Save jenkins config\n    try:\n        configs = jenkins_config[self.name.lower()]\n        for config in configs:\n            mapping = config['mapping']\n            identifier = config['identifier']\n            del config['mapping']\n            del config['identifier']\n            activity_type, _ = ActivityType.objects.update_or_create(\n                product=self,\n                identifier=identifier,\n                defaults=config\n            )\n            for geohosting_key, jenkins_key in mapping.items():\n                ActivityTypeMapping.objects.update_or_create(\n                    activity_type=activity_type,\n                    geohosting_key=geohosting_key,\n                    defaults={\n                        'jenkins_key': jenkins_key\n                    }\n                )\n    except KeyError:\n        pass\n\n    # Save product cluster\n    try:\n        config = product_cluster[self.name.lower()]\n        ProductCluster.objects.update_or_create(\n            product=self,\n            cluster=Cluster.objects.get(\n                code=config['cluster'],\n                region__code=config['region']\n            ),\n            defaults={\n                'environment': config['environment']\n            }\n        )\n    except (KeyError, Cluster.DoesNotExist):\n        pass\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product.Product.get_product_cluster","title":"get_product_cluster","text":"<pre><code>get_product_cluster(region)\n</code></pre> <p>Return product cluster.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>def get_product_cluster(self, region):\n    \"\"\"Return product cluster.\"\"\"\n    return self.productcluster_set.get(\n        cluster__region=region\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product.Product.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save model.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Save model.\"\"\"\n    super(Product, self).save(*args, **kwargs)\n    self.generate_data()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product.ProductCluster","title":"geohosting.models.product.ProductCluster","text":"<p>               Bases: <code>Model</code></p> <p>Product x cluster model.</p>"},{"location":"developer/manual/#geohosting.models.product.ProductMedia","title":"geohosting.models.product.ProductMedia","text":"<p>               Bases: <code>Model</code></p> <p>Product Media model.</p>"},{"location":"developer/manual/#geohosting.models.product.ProductMedia.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return image file name.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>def __str__(self):\n    \"\"\"Return image file name.\"\"\"\n    return self.image.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.product.ProductMetadata","title":"geohosting.models.product.ProductMetadata","text":"<p>               Bases: <code>Model</code></p> <p>Product metadata.</p>"},{"location":"developer/manual/#geohosting.models.product.delete_old_image","title":"geohosting.models.product.delete_old_image","text":"<pre><code>delete_old_image(sender, instance, **kwargs)\n</code></pre> <p>Delete the old image file if a new image is being set.</p> Source code in <code>geohosting/models/product.py</code> <pre><code>@receiver(pre_save, sender=Product)\n@receiver(pre_save, sender=ProductMedia)\ndef delete_old_image(sender, instance, **kwargs):\n    \"\"\"Delete the old image file if a new image is being set.\"\"\"\n    if instance.pk:\n        try:\n            old_product = sender.objects.get(pk=instance.pk)\n        except Product.DoesNotExist:\n            return\n        if old_product.image and instance.image != old_product.image:\n            old_image_path = old_product.image.path\n            if os.path.exists(old_image_path):\n                default_storage.delete(old_image_path)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity","title":"geohosting.models.activity","text":"<p>GeoHosting.</p> <p>.. note:: Activity model.</p>"},{"location":"developer/manual/#geohosting.models.activity.Activity","title":"geohosting.models.activity.Activity","text":"<p>               Bases: <code>Model</code></p> <p>Activity of instance.</p>"},{"location":"developer/manual/#geohosting.models.activity.Activity.is_creation","title":"is_creation  <code>property</code>","text":"<pre><code>is_creation\n</code></pre> <p>Is activity creation.</p>"},{"location":"developer/manual/#geohosting.models.activity.Activity.is_deletion","title":"is_deletion  <code>property</code>","text":"<pre><code>is_deletion\n</code></pre> <p>Is activity creation.</p>"},{"location":"developer/manual/#geohosting.models.activity.Activity.create_instance","title":"create_instance","text":"<pre><code>create_instance()\n</code></pre> <p>Create activity.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def create_instance(self):\n    \"\"\"Create activity.\"\"\"\n    if not self.instance and self.jenkins_queue_url:\n        if self.sales_order:\n            price = self.sales_order.package\n        else:\n            price = Package.objects.filter(\n                package_group__package_code=self.client_data[\n                    'package_code'\n                ]\n            ).first()\n\n        if (\n                self.activity_type.identifier ==\n                ActivityTypeTerm.CREATE_INSTANCE.value\n        ):\n            product_cluster_id = self.client_data['product_cluster_id']\n            product_cluster = ProductCluster.objects.get(\n                id=product_cluster_id\n            )\n            cluster = product_cluster.cluster\n            try:\n                company = self.sales_order.company\n            except Exception:\n                company = None\n            instance = Instance.objects.create(\n                name=self.client_data['app_name'],\n                price=price,\n                cluster=cluster,\n                owner=self.triggered_by,\n                company=company\n            )\n            self.instance = instance\n            self.save()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.delete_instance","title":"delete_instance","text":"<pre><code>delete_instance()\n</code></pre> <p>Delete instance.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def delete_instance(self):\n    \"\"\"Delete instance.\"\"\"\n    if self.jenkins_queue_url:\n        LogTracker.success(self, 'DELETING')\n        self.instance.deleting()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.error","title":"error","text":"<pre><code>error()\n</code></pre> <p>Error.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def error(self):\n    \"\"\"Error.\"\"\"\n    if not self.is_deletion:\n        if self.instance:\n            self.instance.offline()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.execute","title":"execute","text":"<pre><code>execute()\n</code></pre> <p>Execute script.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def execute(self):\n    \"\"\"Execute script.\"\"\"\n    if self.is_creation:\n        # Create instance when jenkins communication is ok\n        self.create_instance()\n    elif self.is_deletion:\n        # Delete instance\n        self.delete_instance()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the activity.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def run(self):\n    \"\"\"Run the activity.\"\"\"\n    try:\n        response = request_post(\n            url=self.activity_type.url,\n            data=self.post_data\n        )\n        if response.status_code != 201:\n            self.update_status(\n                ActivityStatus.ERROR, response.content\n            )\n            raise ConnectionErrorException(\n                response.content, response=response\n            )\n        self.jenkins_queue_url = response.headers['Location']\n        self.update_status(ActivityStatus.BUILD_ARGO)\n        self.execute()\n    except Exception as e:\n        self.update_status(\n            ActivityStatus.ERROR, f'{e}'\n        )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.running_activities","title":"running_activities  <code>staticmethod</code>","text":"<pre><code>running_activities(app_name)\n</code></pre> <p>Return running activities.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>@staticmethod\ndef running_activities(app_name):\n    \"\"\"Return running activities.\"\"\"\n    return Activity.objects.filter(client_data__app_name=app_name).exclude(\n        Q(status=ActivityStatus.ERROR) |\n        Q(status=ActivityStatus.SUCCESS)\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Override importer saved.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Override importer saved.\"\"\"\n    created = not self.pk\n    super(Activity, self).save(*args, **kwargs)\n    if created:\n        self.update_status(ActivityStatus.RUNNING)\n        self.run()\n    else:\n        self.execute()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.success","title":"success","text":"<pre><code>success()\n</code></pre> <p>Success.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def success(self):\n    \"\"\"Success.\"\"\"\n    if self.instance:\n        if self.is_creation:\n            self.instance.starting_up()\n        elif self.is_deletion:\n            self.instance.deleted()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.test_name","title":"test_name  <code>staticmethod</code>","text":"<pre><code>test_name(name)\n</code></pre> <p>Validate name.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>@staticmethod\ndef test_name(name):\n    \"\"\"Validate name.\"\"\"\n    if not re.match(regex_name, name):\n        raise ActivityException(regex_name_error)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.Activity.update_status","title":"update_status","text":"<pre><code>update_status(status, note=None)\n</code></pre> <p>Update activity status.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def update_status(self, status, note=None):\n    \"\"\"Update activity status.\"\"\"\n    from geohosting.models.sales_order import SalesOrderStatus\n    self.status = status\n    if note:\n        self.note = note\n    self.save()\n    if self.sales_order:\n        comment = f'Auto deployment: {self.status}.'\n        if self.note:\n            comment += f'\\n{self.note}'\n        self.sales_order.add_comment(comment)\n        if self.status == ActivityStatus.SUCCESS:\n            self.sales_order.order_status = SalesOrderStatus.DEPLOYED.key\n            self.sales_order.save()\n\n    # Do some function when success\n    if self.status == ActivityStatus.SUCCESS:\n        self.success()\n    if self.status == ActivityStatus.ERROR:\n        self.error()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.ActivityStatus","title":"geohosting.models.activity.ActivityStatus","text":"<p>Activity Status.</p>"},{"location":"developer/manual/#geohosting.models.activity.ActivityType","title":"geohosting.models.activity.ActivityType","text":"<p>               Bases: <code>Model</code></p> <p>Activity type contains URL.</p>"},{"location":"developer/manual/#geohosting.models.activity.ActivityType.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre> <p>Return jenkins URL.</p>"},{"location":"developer/manual/#geohosting.models.activity.ActivityType.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return activity type name.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def __str__(self):\n    \"\"\"Return activity type name.\"\"\"\n    return self.identifier\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.ActivityType.mapping_data","title":"mapping_data","text":"<pre><code>mapping_data(data: dict)\n</code></pre> <p>Map data.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>def mapping_data(self, data: dict):\n    \"\"\"Map data.\"\"\"\n    new_data = {}\n    for key, value in data.items():\n        try:\n            jenkins_key = self.activitytypemapping_set.get(\n                geohosting_key=key\n            ).jenkins_key\n            new_data[jenkins_key] = value\n        except ActivityTypeMapping.DoesNotExist:\n            pass\n    return new_data\n</code></pre>"},{"location":"developer/manual/#geohosting.models.activity.ActivityTypeMapping","title":"geohosting.models.activity.ActivityTypeMapping","text":"<p>               Bases: <code>Model</code></p> <p>Mapping between GeoHosting json to jenkins payload.</p>"},{"location":"developer/manual/#geohosting.models.activity.save_instance_to_sales_order","title":"geohosting.models.activity.save_instance_to_sales_order","text":"<pre><code>save_instance_to_sales_order(\n    sender, instance, created, **kwargs\n)\n</code></pre> <p>Save instance to sales order on post save.</p> Source code in <code>geohosting/models/activity.py</code> <pre><code>@receiver(post_save, sender=Activity)\ndef save_instance_to_sales_order(sender, instance, created, **kwargs):\n    \"\"\"Save instance to sales order on post save.\"\"\"\n    if instance.instance and not instance.instance.created_at:\n        instance.instance.created_at = instance.triggered_at\n        instance.instance.modified_at = instance.triggered_at\n        instance.instance.save()\n\n    if instance.instance and instance.sales_order:\n        instance.sales_order.instance = instance.instance\n        instance.sales_order.save()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.region","title":"geohosting.models.region","text":"<p>GeoHosting.</p> <p>.. note:: Region model.</p>"},{"location":"developer/manual/#geohosting.models.region.Region","title":"geohosting.models.region.Region","text":"<p>               Bases: <code>Model</code></p> <p>Region model.</p>"},{"location":"developer/manual/#geohosting.models.region.Region.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return region name.</p> Source code in <code>geohosting/models/region.py</code> <pre><code>def __str__(self):\n    \"\"\"Return region name.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.region.Region.default_region","title":"default_region  <code>staticmethod</code>","text":"<pre><code>default_region()\n</code></pre> <p>Return default region.</p> Source code in <code>geohosting/models/region.py</code> <pre><code>@staticmethod\ndef default_region():\n    \"\"\"Return default region.\"\"\"\n    region, _ = Region.objects.get_or_create(\n        code='global',\n        defaults={\n            'name': 'Global'\n        }\n    )\n    return region\n</code></pre>"},{"location":"developer/manual/#geohosting.models.log","title":"geohosting.models.log","text":"<p>GeoHosting.</p> <p>.. note:: Log tracker.</p>"},{"location":"developer/manual/#geohosting.models.log.LogTracker","title":"geohosting.models.log.LogTracker","text":"<p>               Bases: <code>Model</code></p> <p>Log tracker.</p>"},{"location":"developer/manual/#geohosting.models.log.LogTracker.error","title":"error  <code>staticmethod</code>","text":"<pre><code>error(instance, note)\n</code></pre> <p>Create log for failed process.</p> Source code in <code>geohosting/models/log.py</code> <pre><code>@staticmethod\ndef error(instance, note):\n    \"\"\"Create log for failed process.\"\"\"\n    LogTracker._create_log(instance, LogTracker.ERROR, note)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.log.LogTracker.success","title":"success  <code>staticmethod</code>","text":"<pre><code>success(instance, note='')\n</code></pre> <p>Create log for failed process.</p> Source code in <code>geohosting/models/log.py</code> <pre><code>@staticmethod\ndef success(instance, note=''):\n    \"\"\"Create log for failed process.\"\"\"\n    LogTracker._create_log(instance, LogTracker.SUCCESS, note)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.webhook","title":"geohosting.models.webhook","text":"<p>GeoHosting.</p> <p>.. note:: Instance model.</p>"},{"location":"developer/manual/#geohosting.models.webhook.WebhookEvent","title":"geohosting.models.webhook.WebhookEvent","text":"<p>               Bases: <code>Model</code></p> <p>WebhookEvent model.</p>"},{"location":"developer/manual/#geohosting.models.webhook.WebhookEvent.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return string representation.</p> Source code in <code>geohosting/models/webhook.py</code> <pre><code>def __str__(self):\n    \"\"\"Return string representation.\"\"\"\n    return str(self.triggered_at)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.webhook.WebhookStatus","title":"geohosting.models.webhook.WebhookStatus","text":"<p>Webhook Status.</p>"},{"location":"developer/manual/#geohosting.models.instance","title":"geohosting.models.instance","text":"<p>GeoHosting.</p> <p>.. note:: Instance model.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance","title":"geohosting.models.instance.Instance","text":"<p>               Bases: <code>Model</code></p> <p>Instance model.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.credentials","title":"credentials  <code>property</code>","text":"<pre><code>credentials\n</code></pre> <p>Return credentials.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.is_lock","title":"is_lock  <code>property</code>","text":"<pre><code>is_lock\n</code></pre> <p>Is lock is basically when the instance can't be updated.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.is_ready","title":"is_ready  <code>property</code>","text":"<pre><code>is_ready\n</code></pre> <p>When the instance is up.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.product_cluster","title":"product_cluster  <code>property</code>","text":"<pre><code>product_cluster\n</code></pre> <p>Return product cluster.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre> <p>Return url.</p>"},{"location":"developer/manual/#geohosting.models.instance.Instance.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return activity type name.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def __str__(self):\n    \"\"\"Return activity type name.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.cancel_subscription","title":"cancel_subscription","text":"<pre><code>cancel_subscription()\n</code></pre> <p>Cancel subscription.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def cancel_subscription(self):\n    \"\"\"Cancel subscription.\"\"\"\n    if self.status != InstanceStatus.DELETED:\n        return\n\n    from geohosting.models.sales_order import SalesOrder\n    sales_orders = SalesOrder.objects.filter(\n        payment_id__isnull=False,\n        instance=self\n    )\n    for sales_order in sales_orders:\n        sales_order.cancel_subscription()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.checking_server","title":"checking_server","text":"<pre><code>checking_server()\n</code></pre> <p>Check server is online or offline.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def checking_server(self):\n    \"\"\"Check server is online or offline.\"\"\"\n    from geohosting.models.webhook import WebhookEvent, WebhookStatus\n    # If deleted, no need to check\n    if self.status in [InstanceStatus.DELETED]:\n        return\n\n    # If deleting, we can check the webhook\n    if self.status in [InstanceStatus.DELETING]:\n        if WebhookEvent.objects.filter(\n                activity__instance=self,\n                data__Status=WebhookStatus.DELETED\n        ).exists():\n            self.deleted()\n        return\n\n    try:\n        print(self.url)\n        response = requests.head(self.url)\n        print(response.status_code)\n        if response.status_code in [200, 302]:\n            self.online()\n        else:\n            LogTracker.error(\n                self,\n                (\n                    f'Server - {self.url}: '\n                    f'{response.status_code} - {response.text}'\n                )\n            )\n            self.offline()\n    except requests.exceptions.ConnectionError as e:\n        LogTracker.error(self, f'Server - {self.url}: {e}')\n        self.offline()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.deleted","title":"deleted","text":"<pre><code>deleted()\n</code></pre> <p>Make instance deleted.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def deleted(self):\n    \"\"\"Make instance deleted.\"\"\"\n    from geohosting.models.activity import Activity, ActivityStatus\n    self._change_status(InstanceStatus.DELETED)\n    for activity in Activity.running_activities(self.name):\n        activity.status = ActivityStatus.SUCCESS\n        activity.save()\n    try:\n        self.cancel_subscription()\n    except Exception as e:\n        LogTracker.error(self, f'Cancel subscription : {e}')\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.deleting","title":"deleting","text":"<pre><code>deleting()\n</code></pre> <p>Make instance deleting.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def deleting(self):\n    \"\"\"Make instance deleting.\"\"\"\n    if self.status != InstanceStatus.DELETED:\n        self._change_status(InstanceStatus.DELETING)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.offline","title":"offline","text":"<pre><code>offline()\n</code></pre> <p>Make instance offline.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def offline(self):\n    \"\"\"Make instance offline.\"\"\"\n    if self.status in [\n        InstanceStatus.DEPLOYING,\n        InstanceStatus.STARTING_UP,\n        InstanceStatus.DELETING,\n        InstanceStatus.DELETED\n    ]:\n        return\n    if self.is_lock:\n        return\n    self._change_status(InstanceStatus.OFFLINE)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.online","title":"online","text":"<pre><code>online()\n</code></pre> <p>Make instance online.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def online(self):\n    \"\"\"Make instance online.\"\"\"\n    if self.is_lock:\n        return\n\n    # For deploying, change to starting up\n    if self.status == InstanceStatus.DEPLOYING:\n        self.status = InstanceStatus.STARTING_UP\n\n    # When starting up, send credential\n    if self.status == InstanceStatus.STARTING_UP:\n        self.send_credentials()\n\n    self._change_status(InstanceStatus.ONLINE)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.send_credentials","title":"send_credentials","text":"<pre><code>send_credentials()\n</code></pre> <p>Send credentials.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def send_credentials(self):\n    \"\"\"Send credentials.\"\"\"\n    if self.status not in [\n        InstanceStatus.STARTING_UP, InstanceStatus.ONLINE,\n        InstanceStatus.OFFLINE\n    ]:\n        return\n    pref = Preferences.load()\n    name = f'{self.owner.first_name} {self.owner.last_name}'\n    if not self.price.package_group.vault_url:\n        html_content = render_to_string(\n            template_name='emails/GeoHosting_Product is Error.html',\n            context={\n                'name': name,\n            }\n        )\n    else:\n        try:\n            get_credentials(\n                self.price.package_group.vault_url,\n                self.name\n            )\n            instance_url = (\n                f\"{FRONTEND_URL}#/dashboard?q={self.name}\"\n            )\n            instance_url = instance_url.replace('#/#', '#')\n            html_content = render_to_string(\n                template_name='emails/GeoHosting_Product is Ready.html',\n                context={\n                    'name': name,\n                    'url': self.url,\n                    'instance_url': instance_url,\n                    'app_name': self.name,\n                    'support_email': pref.support_email,\n                }\n            )\n            LogTracker.success(self, 'Get credential')\n        except Exception as e:\n            LogTracker.error(self, f'Get credential : {e}')\n            html_content = render_to_string(\n                template_name='emails/GeoHosting_Product is Error.html',\n                context={\n                    'name': name,\n                    'app_name': self.name,\n                    'url': self.url,\n                    'support_email': pref.support_email,\n                }\n            )\n\n    # Create the email message\n    email = EmailMessage(\n        subject=f'{self.name} is ready',\n        body=html_content,\n        from_email=settings.DEFAULT_FROM_EMAIL,\n        to=[self.owner.email]\n    )\n    email.content_subtype = 'html'\n    email.send()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.Instance.starting_up","title":"starting_up","text":"<pre><code>starting_up()\n</code></pre> <p>Make instance online.</p> Source code in <code>geohosting/models/instance.py</code> <pre><code>def starting_up(self):\n    \"\"\"Make instance online.\"\"\"\n    if self.is_lock:\n        return\n    self._change_status(InstanceStatus.STARTING_UP)\n</code></pre>"},{"location":"developer/manual/#geohosting.models.instance.InstanceStatus","title":"geohosting.models.instance.InstanceStatus","text":"<p>Instance Status.</p>"},{"location":"developer/manual/#geohosting.models.erp","title":"geohosting.models.erp","text":"<p>GeoHosting.</p> <p>.. note:: Model for ERP.</p>"},{"location":"developer/manual/#geohosting.models.erp.ErpRequestLog","title":"geohosting.models.erp.ErpRequestLog","text":"<p>               Bases: <code>Model</code></p> <p>Log for erp request.</p>"},{"location":"developer/manual/#geohosting.models.erp.RequestMethod","title":"geohosting.models.erp.RequestMethod","text":"<p>Request method.</p>"},{"location":"developer/manual/#geohosting.models.erp_model","title":"geohosting.models.erp_model","text":"<p>GeoHosting.</p> <p>.. note:: Model for ERP.</p>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel","title":"geohosting.models.erp_model.ErpModel","text":"<p>               Bases: <code>Model</code></p> <p>Abstract erp model.</p>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel.post_to_erpnext","title":"post_to_erpnext","text":"<pre><code>post_to_erpnext()\n</code></pre> <p>Post data to erpnext.</p> Source code in <code>geohosting/models/erp_model.py</code> <pre><code>def post_to_erpnext(self):\n    \"\"\"Post data to erpnext.\"\"\"\n    if not self.erpnext_code:\n        result = post_to_erpnext(\n            self.erp_payload_for_create,\n            self.doc_type\n        )\n        if result['status'] == 'success':\n            self.erpnext_code = result[self.id_field_in_erpnext]\n            self.save()\n    else:\n        result = put_to_erpnext(\n            self.erp_payload_for_edit,\n            self.doc_type,\n            self.erpnext_code\n        )\n    return result\n</code></pre>"},{"location":"developer/manual/#geohosting.models.erp_model.ErpModel.sync_data","title":"sync_data  <code>classmethod</code>","text":"<pre><code>sync_data()\n</code></pre> <p>Sync data from erpnext to django that has erpnext code.</p> Source code in <code>geohosting/models/erp_model.py</code> <pre><code>@classmethod\ndef sync_data(cls):\n    \"\"\"Sync data from erpnext to django that has erpnext code.\"\"\"\n    try:\n        data = fetch_erpnext_data(cls().doc_type)\n        field_names = [\n            field.name for field in cls._meta.get_fields() if\n            field.editable and not field.auto_created\n            and field.name != 'erpnext_code'\n        ]\n        for _data in data:\n            cls.objects.update_or_create(\n                erpnext_code=_data[cls.id_field_in_erpnext],\n                defaults={\n                    key: value for key, value in _data.items() if\n                    key in field_names\n                }\n            )\n    except Exception as e:\n        print(e)\n        pass\n</code></pre>"},{"location":"developer/manual/#geohosting.models.cluster","title":"geohosting.models.cluster","text":"<p>GeoHosting.</p> <p>.. note:: Cluster model.</p>"},{"location":"developer/manual/#geohosting.models.cluster.Cluster","title":"geohosting.models.cluster.Cluster","text":"<p>               Bases: <code>Model</code></p> <p>Cluster model.</p>"},{"location":"developer/manual/#geohosting.models.cluster.Cluster.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return region name.</p> Source code in <code>geohosting/models/cluster.py</code> <pre><code>def __str__(self):\n    \"\"\"Return region name.\"\"\"\n    return f'{self.code} - {self.region}'\n</code></pre>"},{"location":"developer/manual/#geohosting.models.agreement","title":"geohosting.models.agreement","text":"<p>GeoHosting.</p> <p>.. note:: Instance model.</p>"},{"location":"developer/manual/#geohosting.models.agreement.Agreement","title":"geohosting.models.agreement.Agreement","text":"<p>               Bases: <code>Model</code></p> <p>Agreement model.</p>"},{"location":"developer/manual/#geohosting.models.agreement.Agreement.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return string representation.</p> Source code in <code>geohosting/models/agreement.py</code> <pre><code>def __str__(self):\n    \"\"\"Return string representation.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.agreement.AgreementDetail","title":"geohosting.models.agreement.AgreementDetail","text":"<p>               Bases: <code>Model</code></p> <p>Agreement model.</p>"},{"location":"developer/manual/#geohosting.models.agreement.AgreementDetail.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return string representation.</p> Source code in <code>geohosting/models/agreement.py</code> <pre><code>def __str__(self):\n    \"\"\"Return string representation.\"\"\"\n    return self.agreement.__str__()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.agreement.SalesOrderAgreement","title":"geohosting.models.agreement.SalesOrderAgreement","text":"<p>               Bases: <code>Model</code></p> <p>Sales Order Agreement model.</p>"},{"location":"developer/manual/#geohosting.models.agreement.SalesOrderAgreement.content","title":"content  <code>property</code>","text":"<pre><code>content\n</code></pre> <p>Return content of sales order agreement.</p>"},{"location":"developer/manual/#geohosting.models.agreement.SalesOrderAgreement.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return string representation.</p> Source code in <code>geohosting/models/agreement.py</code> <pre><code>def __str__(self):\n    \"\"\"Return string representation.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.company","title":"geohosting.models.company","text":""},{"location":"developer/manual/#geohosting.models.company.Company","title":"geohosting.models.company.Company","text":"<p>               Bases: <code>ErpModel</code></p> <p>Company profile model.</p>"},{"location":"developer/manual/#geohosting.models.company.Company.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.company.Company.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.company.Company.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.company.Company.post_to_erpnext","title":"post_to_erpnext","text":"<pre><code>post_to_erpnext()\n</code></pre> <p>Post data to erp.</p> Source code in <code>geohosting/models/company.py</code> <pre><code>def post_to_erpnext(self):\n    \"\"\"Post data to erp.\"\"\"\n    erpnext_code = self.erpnext_code\n    output = super().post_to_erpnext()\n    self.companybillinginformation.post_to_erpnext()\n    if not erpnext_code:\n        for contact in self.companycontact_set.all():\n            contact.post_to_erpnext()\n\n    return output\n</code></pre>"},{"location":"developer/manual/#geohosting.models.company.CompanyBillingInformation","title":"geohosting.models.company.CompanyBillingInformation","text":"<p>               Bases: <code>BillingInformation</code></p> <p>Company billing information model.</p>"},{"location":"developer/manual/#geohosting.models.company.CompanyBillingInformation.customer_name","title":"customer_name  <code>property</code>","text":"<pre><code>customer_name\n</code></pre> <p>Return customer name.</p>"},{"location":"developer/manual/#geohosting.models.company.CompanyContact","title":"geohosting.models.company.CompanyContact","text":"<p>               Bases: <code>ErpModel</code></p> <p>Company profile model.</p>"},{"location":"developer/manual/#geohosting.models.company.CompanyContact.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.company.CompanyContact.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.company.CompanyContact.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.erp_company","title":"geohosting.models.erp_company","text":""},{"location":"developer/manual/#geohosting.models.erp_company.ErpCompany","title":"geohosting.models.erp_company.ErpCompany","text":"<p>               Bases: <code>ErpModel</code></p> <p>Company that is coming from ERP.</p>"},{"location":"developer/manual/#geohosting.models.erp_company.ErpCompany.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.package","title":"geohosting.models.package","text":"<p>GeoHosting.</p> <p>.. note:: Package model.</p>"},{"location":"developer/manual/#geohosting.models.package.Package","title":"geohosting.models.package.Package","text":"<p>               Bases: <code>Model</code></p> <p>Package model for products.</p>"},{"location":"developer/manual/#geohosting.models.package.Package.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return package name and price.</p> Source code in <code>geohosting/models/package.py</code> <pre><code>def __str__(self):\n    \"\"\"Return package name and price.\"\"\"\n    return f\"{self.name} - {self.price}\"\n</code></pre>"},{"location":"developer/manual/#geohosting.models.package.Package.get_paystack_price_id","title":"get_paystack_price_id","text":"<pre><code>get_paystack_price_id()\n</code></pre> <p>Return price id on paystack.</p> Source code in <code>geohosting/models/package.py</code> <pre><code>def get_paystack_price_id(self):\n    \"\"\"Return price id on paystack.\"\"\"\n    if not self.paystack_id:\n        self._create_paystack_price_id()\n    return self.paystack_id\n</code></pre>"},{"location":"developer/manual/#geohosting.models.package.Package.get_stripe_price_id","title":"get_stripe_price_id","text":"<pre><code>get_stripe_price_id()\n</code></pre> <p>Return price id on stripe.</p> Source code in <code>geohosting/models/package.py</code> <pre><code>def get_stripe_price_id(self):\n    \"\"\"Return price id on stripe.\"\"\"\n    if not self.stripe_id:\n        self._create_stripe_price_id()\n    return self.stripe_id\n</code></pre>"},{"location":"developer/manual/#geohosting.models.package.PackageGroup","title":"geohosting.models.package.PackageGroup","text":"<p>               Bases: <code>Model</code></p> <p>Package model for products.</p>"},{"location":"developer/manual/#geohosting.models.package.PackageGroup.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return package group name.</p> Source code in <code>geohosting/models/package.py</code> <pre><code>def __str__(self):\n    \"\"\"Return package group name.\"\"\"\n    return self.name\n</code></pre>"},{"location":"developer/manual/#geohosting.models.support","title":"geohosting.models.support","text":""},{"location":"developer/manual/#geohosting.models.support.Attachment","title":"geohosting.models.support.Attachment","text":"<p>               Bases: <code>Model</code></p> <p>Attachment model.</p>"},{"location":"developer/manual/#geohosting.models.support.Attachment.post_to_erpnext","title":"post_to_erpnext","text":"<pre><code>post_to_erpnext()\n</code></pre> <p>Post the attachment to erp.</p> Source code in <code>geohosting/models/support.py</code> <pre><code>def post_to_erpnext(self):\n    \"\"\"Post the attachment to erp.\"\"\"\n    put_to_erpnext(\n        {},\n        self.ticket.doc_type,\n        self.ticket.erpnext_code,\n        file=self.file.file.read()\n    )\n</code></pre>"},{"location":"developer/manual/#geohosting.models.support.Ticket","title":"geohosting.models.support.Ticket","text":"<p>               Bases: <code>ErpModel</code></p> <p>Ticket model.</p>"},{"location":"developer/manual/#geohosting.models.support.Ticket.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.support.Ticket.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.support.Ticket.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.support.Ticket.fetch_ticket_from_erp","title":"fetch_ticket_from_erp  <code>staticmethod</code>","text":"<pre><code>fetch_ticket_from_erp(user_email, ids=None)\n</code></pre> <p>Fetch ticket from erp.</p> Source code in <code>geohosting/models/support.py</code> <pre><code>@staticmethod\ndef fetch_ticket_from_erp(user_email, ids=None):\n    \"\"\"Fetch ticket from erp.\"\"\"\n    filters = [\n        [\"raised_by\", \"=\", user_email]\n    ]\n    if ids:\n        filters.append(\n            [\"name\", \"in\", ids]\n        )\n\n    try:\n        erp_tickets = fetch_erpnext_data(\n            doctype=\"Issue\", filters=filters,\n            fields=[\n                \"name\", \"subject\", \"description\", \"status\", \"owner\",\n                \"modified\"\n            ]\n        )\n        if not isinstance(erp_tickets, list):\n            raise ValueError(\"Failed to fetch data from ERPNext\")\n\n        for erp_ticket in erp_tickets:\n            django_status = status_erp.get(\n                erp_ticket.get('status'), 'open'\n            )\n            if erp_ticket.get('name'):\n                Ticket.objects.update_or_create(\n                    customer=user_email,\n                    erpnext_code=erp_ticket.get('name'),\n                    defaults={\n                        'status': django_status,\n                        'subject': erp_ticket.get('subject'),\n                        'details': erp_ticket.get('description'),\n                        'updated_at': datetime.strptime(\n                            erp_ticket.get('modified'),\n                            \"%Y-%m-%d %H:%M:%S.%f\"\n                        ),\n                    }\n                )\n    except Exception as e:\n        print(f\"Error fetching or updating tickets from ERPNext: {e}\")\n</code></pre>"},{"location":"developer/manual/#geohosting.models.fields","title":"geohosting.models.fields","text":"<p>GeoHosting.</p> <p>.. note:: Fields model.</p>"},{"location":"developer/manual/#geohosting.models.user_profile","title":"geohosting.models.user_profile","text":""},{"location":"developer/manual/#geohosting.models.user_profile.UserBillingInformation","title":"geohosting.models.user_profile.UserBillingInformation","text":"<p>               Bases: <code>BillingInformation</code></p> <p>User billing information model.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserBillingInformation.customer_name","title":"customer_name  <code>property</code>","text":"<pre><code>customer_name\n</code></pre> <p>Return customer name.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserProfile","title":"geohosting.models.user_profile.UserProfile","text":"<p>               Bases: <code>ErpModel</code></p> <p>User profile model.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserProfile.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserProfile.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserProfile.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.user_profile.UserProfile.post_to_erpnext","title":"post_to_erpnext","text":"<pre><code>post_to_erpnext()\n</code></pre> <p>Post data to erp.</p> Source code in <code>geohosting/models/user_profile.py</code> <pre><code>def post_to_erpnext(self):\n    \"\"\"Post data to erp.\"\"\"\n    super().post_to_erpnext()\n    self.user.userbillinginformation.post_to_erpnext()\n    for contact in self.user.companycontact_set.all():\n        contact.post_to_erpnext()\n</code></pre>"},{"location":"developer/manual/#geohosting.models.country","title":"geohosting.models.country","text":"<p>GeoHosting.</p> <p>.. note:: Cluster model.</p>"},{"location":"developer/manual/#geohosting.models.country.Country","title":"geohosting.models.country.Country","text":"<p>               Bases: <code>ErpModel</code></p> <p>Country model.</p>"},{"location":"developer/manual/#geohosting.models.country.Country.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type\n</code></pre> <p>Doctype for this model.</p>"},{"location":"developer/manual/#geohosting.models.country.Country.erp_payload_for_create","title":"erp_payload_for_create  <code>property</code>","text":"<pre><code>erp_payload_for_create\n</code></pre> <p>ERP Payload for create request.</p>"},{"location":"developer/manual/#geohosting.models.country.Country.erp_payload_for_edit","title":"erp_payload_for_edit  <code>property</code>","text":"<pre><code>erp_payload_for_edit\n</code></pre> <p>ERP Payload for edit request.</p>"},{"location":"developer/manual/#geohosting.models.country.Country.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return country name.</p> Source code in <code>geohosting/models/country.py</code> <pre><code>def __str__(self):\n    \"\"\"Return country name.\"\"\"\n    return f'{self.name}'\n</code></pre>"},{"location":"developer/manual/#geohosting.forms.activity.delete_instance","title":"geohosting.forms.activity.delete_instance","text":"<p>GeoHosting.</p> <p>.. note:: Instance deleting form.</p>"},{"location":"developer/manual/#geohosting.forms.activity.delete_instance.DeletingInstanceForm","title":"geohosting.forms.activity.delete_instance.DeletingInstanceForm","text":"<p>               Bases: <code>ModelForm</code></p> <p>Instance deleting instance.</p> <p>Creating instance through activity.</p>"},{"location":"developer/manual/#geohosting.forms.activity.delete_instance.DeletingInstanceForm.clean","title":"clean","text":"<pre><code>clean()\n</code></pre> <p>Clean form.</p> Source code in <code>geohosting/forms/activity/delete_instance.py</code> <pre><code>def clean(self):\n    \"\"\"Clean form.\"\"\"\n    cleaned_data = super().clean()\n\n    try:\n        # Check activity\n        application = cleaned_data['application']\n        if not self.user.is_superuser and application.owner != self.user:\n            raise forms.ValidationError(\n                'You are not allowed to delete this instance.'\n            )\n        if not application.is_ready:\n            raise forms.ValidationError(\n                'Instance is not ready.'\n            )\n\n        if application.is_lock:\n            raise Exception('Instance is already being deleted.')\n\n        product = application.price.product\n        self.instance.activity_type_id = ActivityType.objects.get(\n            identifier=self.activity_identifier,\n            product=product\n        ).id\n        self.instance.instance = application\n        self.instance.triggered_by = self.user\n\n        # Check product cluster\n        product_cluster = product.get_product_cluster(\n            Region.default_region()\n        )\n\n        data = {\n            'app_name': application.name,\n            'package_id': application.price.id,\n            'product_cluster_id': product_cluster.id,\n        }\n        cleaned_data['client_data'] = data\n        self.instance.client_data = data\n\n        # Get post data\n        self.instance.post_data = self._post_data(application)\n    except AttributeError:\n        raise forms.ValidationError('User is missing.')\n    except ActivityType.DoesNotExist:\n        raise forms.ValidationError(\n            f'Activity type {self.activity_identifier} does not exist.'\n        )\n    except Exception as e:\n        raise forms.ValidationError(f'{e}')\n    return cleaned_data\n</code></pre>"},{"location":"developer/manual/#geohosting.forms.activity.create_instance","title":"geohosting.forms.activity.create_instance","text":"<p>GeoHosting.</p> <p>.. note:: Instance create form.</p>"},{"location":"developer/manual/#geohosting.forms.activity.create_instance.CreateInstanceForm","title":"geohosting.forms.activity.create_instance.CreateInstanceForm","text":"<p>               Bases: <code>ModelForm</code></p> <p>Instance create form.</p> <p>Creating instance through activity.</p>"},{"location":"developer/manual/#geohosting.forms.activity.create_instance.CreateInstanceForm.clean","title":"clean","text":"<pre><code>clean()\n</code></pre> <p>Clean form.</p> Source code in <code>geohosting/forms/activity/create_instance.py</code> <pre><code>def clean(self):\n    \"\"\"Clean form.\"\"\"\n    cleaned_data = super().clean()\n    app_name = cleaned_data.get('app_name')\n    package = cleaned_data.get('package')\n    region = cleaned_data.get('region')\n    try:\n        # Check package group\n        if not package.package_group.package_code:\n            raise Exception('No package group code')\n\n        # Check activity\n        self.instance.activity_type_id = ActivityType.objects.get(\n            identifier=self.activity_identifier,\n            product=package.product\n        ).id\n        self.instance.triggered_by = self.user\n\n        # Check product cluster\n        product = package.product\n        product_cluster = product.get_product_cluster(region)\n\n        data = {\n            'app_name': app_name,\n            'package_id': package.id,\n            'package_code': package.package_group.package_code,\n            'product_name': package.product.name,\n            'region_id': region.id,\n            'region_name': region.name,\n            'product_cluster_id': product_cluster.id\n        }\n        cleaned_data['client_data'] = data\n        self.instance.client_data = data\n\n        # Get post data\n        self.instance.post_data = self._post_data()\n    except AttributeError:\n        raise forms.ValidationError('User is missing.')\n    except ProductCluster.DoesNotExist:\n        raise forms.ValidationError(\n            f'Product cluster for region {region.name} does not exist.'\n        )\n    except ActivityType.DoesNotExist:\n        raise forms.ValidationError(\n            f'Activity type {self.activity_identifier} does not exist.'\n        )\n    except Exception as e:\n        raise forms.ValidationError(f'{e}')\n    return cleaned_data\n</code></pre>"},{"location":"developer/manual/#core.celery","title":"core.celery","text":"<p>GeoHosting Controller.</p>"},{"location":"developer/manual/#core.context_processors","title":"core.context_processors","text":"<p>GeoHosting Controller.</p>"},{"location":"developer/manual/#core.context_processors.project_version","title":"core.context_processors.project_version","text":"<pre><code>project_version(request)\n</code></pre> <p>Read project version from file.</p> Source code in <code>core/context_processors.py</code> <pre><code>def project_version(request):\n    \"\"\"Read project version from file.\"\"\"\n    folder = absolute_path('')\n    version = ''\n    version_file = os.path.join(folder, '_version.txt')\n    if os.path.exists(version_file):\n        version += (open(version_file, 'rb').read()).decode(\"utf-8\")\n    pref = Preferences.load()\n\n    # If not production, show commit\n    if pref.site_type != SiteType.PRODUCTION:\n        commit_file = os.path.join(folder, '_commit_hash.txt')\n        if os.path.exists(commit_file):\n            commit = (open(commit_file, 'rb').read()).decode(\"utf-8\")[:5]\n            if commit:\n                version += '-' + commit\n    return {\n        'version': version\n    }\n</code></pre>"},{"location":"developer/manual/#core.context_processors.sentry_dsn","title":"core.context_processors.sentry_dsn","text":"<pre><code>sentry_dsn(request)\n</code></pre> <p>Return sentry dsn for context processor.</p> Source code in <code>core/context_processors.py</code> <pre><code>def sentry_dsn(request):\n    \"\"\"Return sentry dsn for context processor.\"\"\"\n    return {\n        'SENTRY_DSN': settings.SENTRY_DSN\n    }\n</code></pre>"},{"location":"developer/manual/#core.context_processors.stripe","title":"core.context_processors.stripe","text":"<pre><code>stripe(request)\n</code></pre> <p>Return stripe keys for context processor.</p> Source code in <code>core/context_processors.py</code> <pre><code>def stripe(request):\n    \"\"\"Return stripe keys for context processor.\"\"\"\n    return {\n        'STRIPE_PUBLISHABLE_KEY': settings.STRIPE_PUBLISHABLE_KEY\n    }\n</code></pre>"},{"location":"developer/manual/#core.wsgi","title":"core.wsgi","text":"<p>GeoHosting Controller.</p> <p>.. note::WSGI config for core project.</p> <p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/</p>"},{"location":"developer/manual/#core.urls","title":"core.urls","text":"<p>GeoHosting Controller.</p>"},{"location":"developer/manual/#core.urls.PreferencesRedirectView","title":"core.urls.PreferencesRedirectView","text":"<p>               Bases: <code>RedirectView</code></p> <p>Redirect to preferences admin page.</p>"},{"location":"developer/manual/#core.urls.PreferencesRedirectView.get_redirect_url","title":"get_redirect_url","text":"<pre><code>get_redirect_url(*args, **kwargs)\n</code></pre> <p>Return absolute URL to redirect to.</p> Source code in <code>core/urls.py</code> <pre><code>def get_redirect_url(self, *args, **kwargs):\n    \"\"\"Return absolute URL to redirect to.\"\"\"\n    Preferences.load()\n    return '/admin/core/preferences/1/change/'\n</code></pre>"},{"location":"developer/manual/#core.api","title":"core.api","text":"<p>Django settings API.</p>"},{"location":"developer/manual/#core.api.DjangoSettingAPI","title":"core.api.DjangoSettingAPI","text":"<p>               Bases: <code>APIView</code></p> <p>API return django settings.</p>"},{"location":"developer/manual/#core.api.DjangoSettingAPI.get","title":"get","text":"<pre><code>get(request)\n</code></pre> <p>Return django settings of key.</p> Source code in <code>core/api.py</code> <pre><code>def get(self, request):\n    \"\"\"Return django settings of key.\"\"\"\n    try:\n        key = request.GET['key']\n    except KeyError as e:\n        return HttpResponseBadRequest(f'{e} is required')\n\n    try:\n        if key not in self.KEYS:\n            return HttpResponseBadRequest(f'{key} is forbidden.')\n        return HttpResponse(getattr(settings, key))\n    except AttributeError as e:\n        return HttpResponseBadRequest(f'{e} does not exist')\n</code></pre>"},{"location":"developer/manual/#core.api.FilteredAPI","title":"core.api.FilteredAPI","text":"<p>               Bases: <code>object</code></p> <p>Return User list.</p>"},{"location":"developer/manual/#core.api.FilteredAPI.filter_query","title":"filter_query","text":"<pre><code>filter_query(request, query, fields: list = None)\n</code></pre> <p>Return filter query.</p> Source code in <code>core/api.py</code> <pre><code>def filter_query(self, request, query, fields: list = None):\n    \"\"\"Return filter query.\"\"\"\n    # This is for default query\n    parameters = request.GET.copy()\n    try:\n        if self.default_query_filter and parameters['q']:\n            for field in self.default_query_filter:\n                parameters[field] = parameters['q']\n    except KeyError:\n        pass\n\n    for param, value in parameters.items():\n        field = param.split('__')[0]\n        if field in self.ignored_fields:\n            continue\n\n        if fields and field not in fields:\n            continue\n\n        if '_in' in param:\n            value = value.split(',')\n\n        if 'date' in param:\n            try:\n                value = datetime.fromtimestamp(int(value))\n            except (ValueError, TypeError):\n                pass\n        try:\n            if 'NaN' in value or 'None' in value:\n                param = f'{field}__isnull'\n                value = True\n                query = query.filter(**{param: value})\n            else:\n                query = query.filter(**{param: value})\n        except FieldError:\n            raise SuspiciousOperation(f'Can not query param {param}')\n        except ValidationError as e:\n            raise SuspiciousOperation(e)\n    return query\n</code></pre>"},{"location":"developer/manual/#core.api.FilteredAPI.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Return queryset of API.</p> Source code in <code>core/api.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Return queryset of API.\"\"\"\n    query = self.queryset\n    return self.filter_query(self.request, query)\n</code></pre>"},{"location":"developer/manual/#core.pagination","title":"core.pagination","text":""},{"location":"developer/manual/#core.pagination.Pagination","title":"core.pagination.Pagination","text":"<p>               Bases: <code>PageNumberPagination</code></p> <p>Pagination for API.</p>"},{"location":"developer/manual/#core.pagination.Pagination.get_paginated_response","title":"get_paginated_response","text":"<pre><code>get_paginated_response(data)\n</code></pre> <p>Response for pagination.</p> Source code in <code>core/pagination.py</code> <pre><code>def get_paginated_response(self, data):\n    \"\"\"Response for pagination.\"\"\"\n    return Response(self.get_paginated_response_data(data))\n</code></pre>"},{"location":"developer/manual/#core.pagination.Pagination.get_paginated_response_data","title":"get_paginated_response_data","text":"<pre><code>get_paginated_response_data(data)\n</code></pre> <p>Return paginated only data.</p> Source code in <code>core/pagination.py</code> <pre><code>def get_paginated_response_data(self, data):\n    \"\"\"Return paginated only data.\"\"\"\n    return {\n        'count': self.page.paginator.count,\n        'next': self.get_next_link(),\n        'previous': self.get_previous_link(),\n        'page': self.page.number,\n        'total_page': self.page.paginator.num_pages,\n        'page_size': self.page.paginator.per_page,\n        'results': data,\n    }\n</code></pre>"},{"location":"developer/manual/#core.asgi","title":"core.asgi","text":"<p>ASGI config for core project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/</p>"},{"location":"developer/manual/#core.factories","title":"core.factories","text":"<p>GeoHosting.</p> <p>.. note:: Core factories.</p>"},{"location":"developer/manual/#core.factories.UserFactory","title":"core.factories.UserFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for User.</p>"},{"location":"developer/manual/#core.settings.contrib","title":"core.settings.contrib","text":"<p>GeoHosting Controller.</p> <p>.. note:: Settings for 3rd party.</p>"},{"location":"developer/manual/#core.settings.contrib.absolute_path","title":"core.settings.contrib.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.settings.utils","title":"core.settings.utils","text":"<p>GeoHosting Controller.</p> <p>.. note:: Utilities for project.</p>"},{"location":"developer/manual/#core.settings.utils.absolute_path","title":"core.settings.utils.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.settings.utils.ensure_secret_key_file","title":"core.settings.utils.ensure_secret_key_file","text":"<pre><code>ensure_secret_key_file()\n</code></pre> <p>Check that secret.py exists in settings dir.</p> <p>If not, creates one with a random generated SECRET_KEY setting.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def ensure_secret_key_file():\n    \"\"\"Check that secret.py exists in settings dir.\n\n    If not, creates one with a random generated SECRET_KEY setting.\n    \"\"\"\n    secret_path = absolute_path('core', 'settings', 'secret.py')\n    if not os.path.exists(secret_path):\n        from django.utils.crypto import get_random_string\n        secret_key = get_random_string(\n            50, 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*(-_=+)')\n        with open(secret_path, 'w') as f:\n            f.write(\"SECRET_KEY = \" + repr(secret_key) + \"\\n\")\n</code></pre>"},{"location":"developer/manual/#core.settings.prod","title":"core.settings.prod","text":"<p>GeoHosting Controller.</p> <p>.. note:: Settings for production mode.</p>"},{"location":"developer/manual/#core.settings.prod.absolute_path","title":"core.settings.prod.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.settings.project","title":"core.settings.project","text":"<p>GeoHosting Controller.</p> <p>.. note:: Project level settings.</p>"},{"location":"developer/manual/#core.settings.project.absolute_path","title":"core.settings.project.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.settings.test","title":"core.settings.test","text":"<p>GeoHosting Controller.</p>"},{"location":"developer/manual/#core.settings.test.absolute_path","title":"core.settings.test.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.settings.base","title":"core.settings.base","text":"<p>Django settings for kartoza django project.</p>"},{"location":"developer/manual/#core.settings.dev","title":"core.settings.dev","text":"<p>GeoHosting Controller.</p> <p>.. note:: Settings for development mode.</p>"},{"location":"developer/manual/#core.settings.dev.absolute_path","title":"core.settings.dev.absolute_path","text":"<pre><code>absolute_path(*args)\n</code></pre> <p>Return absolute path of django project.</p> Source code in <code>core/settings/utils.py</code> <pre><code>def absolute_path(*args):\n    \"\"\"Return absolute path of django project.\"\"\"\n    return os.path.join(DJANGO_ROOT, *args)\n</code></pre>"},{"location":"developer/manual/#core.admin.preferences","title":"core.admin.preferences","text":"<p>GeoHosting.</p> <p>.. note:: Admin Preferences</p>"},{"location":"developer/manual/#core.admin.preferences.PreferencesAdmin","title":"core.admin.preferences.PreferencesAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Preferences Admin.</p>"},{"location":"developer/manual/#core.models.singleton","title":"core.models.singleton","text":"<p>GeoHosting.</p> <p>.. note:: Preferences</p>"},{"location":"developer/manual/#core.models.singleton.SingletonModel","title":"core.models.singleton.SingletonModel","text":"<p>               Bases: <code>Model</code></p> <p>Singleton Abstract Model that just have 1 data on database.</p>"},{"location":"developer/manual/#core.models.singleton.SingletonModel.delete","title":"delete","text":"<pre><code>delete(*args, **kwargs)\n</code></pre> <p>Delete model.</p> Source code in <code>core/models/singleton.py</code> <pre><code>def delete(self, *args, **kwargs):\n    \"\"\"Delete model.\"\"\"\n    pass\n</code></pre>"},{"location":"developer/manual/#core.models.singleton.SingletonModel.load","title":"load  <code>classmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load the singleton model with 1 object.</p> Source code in <code>core/models/singleton.py</code> <pre><code>@classmethod\ndef load(cls):\n    \"\"\"Load the singleton model with 1 object.\"\"\"\n    obj, created = cls.objects.get_or_create(pk=1)\n    return obj\n</code></pre>"},{"location":"developer/manual/#core.models.singleton.SingletonModel.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save model.</p> Source code in <code>core/models/singleton.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Save model.\"\"\"\n    self.pk = 1\n    super(SingletonModel, self).save(*args, **kwargs)\n</code></pre>"},{"location":"developer/manual/#core.models.preferences","title":"core.models.preferences","text":"<p>GeoHosting.</p> <p>.. note:: Preferences</p>"},{"location":"developer/manual/#core.models.preferences.Preferences","title":"core.models.preferences.Preferences","text":"<p>               Bases: <code>SingletonModel</code></p> <p>Preference settings specifically for gap.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.erp_base_url","title":"erp_base_url  <code>property</code>","text":"<pre><code>erp_base_url\n</code></pre> <p>Erp base url.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.erp_next_test","title":"erp_next_test  <code>property</code>","text":"<pre><code>erp_next_test\n</code></pre> <p>Erp next test.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.paystack_test","title":"paystack_test  <code>property</code>","text":"<pre><code>paystack_test\n</code></pre> <p>Paystack test.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.proxy_base_url","title":"proxy_base_url  <code>property</code>","text":"<pre><code>proxy_base_url\n</code></pre> <p>Erp base url.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.proxy_test","title":"proxy_test  <code>property</code>","text":"<pre><code>proxy_test\n</code></pre> <p>Proxy test.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.stripe_test","title":"stripe_test  <code>property</code>","text":"<pre><code>stripe_test\n</code></pre> <p>Stripe test.</p>"},{"location":"developer/manual/#core.models.preferences.Preferences.vault_test","title":"vault_test  <code>property</code>","text":"<pre><code>vault_test\n</code></pre> <p>Vaule test.</p>"},{"location":"developer/manual/#core.models.preferences.SiteType","title":"core.models.preferences.SiteType","text":"<p>               Bases: <code>TextChoices</code></p> <p>Choices of site type.</p>"},{"location":"products/","title":"Index","text":""},{"location":"products/bims/","title":"Index","text":""},{"location":"products/bims/guide/","title":"Bims Guide","text":""},{"location":"products/bims/introduction/","title":"Bims Introduction","text":""},{"location":"products/g3w/","title":"Index","text":""},{"location":"products/g3w/guide/","title":"G3W Guide","text":""},{"location":"products/g3w/introduction/","title":"G3W Introduction","text":""},{"location":"products/geonode/","title":"Index","text":""},{"location":"products/geonode/guide/","title":"Geonode Guide","text":""},{"location":"products/geonode/introduction/","title":"Geonode Introduction","text":""},{"location":"products/geoserver/","title":"Index","text":""},{"location":"products/geoserver/guide/","title":"GeoServer Guide","text":""},{"location":"products/geoserver/introduction/","title":"GeoServer Introduction","text":""},{"location":"products/geosight/","title":"Index","text":""},{"location":"products/geosight/guide/","title":"GeoSight Guide","text":""},{"location":"products/geosight/introduction/","title":"GeoSight Introduction","text":""}]}